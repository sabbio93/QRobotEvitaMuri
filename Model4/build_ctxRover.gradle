/*
================================================================================
build_ctxRover.gradle
GENERATED ONLY ONCE
USAGE:	 
	gradle -b build_ctxRover.gradle eclipse	//to set the dependency on the library
	gradle -b build_ctxRover.gradle build
================================================================================
*/
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'java-library-distribution'

apply plugin: 'jacoco'

buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath 'org.hidetake:gradle-ssh-plugin:2.9.0'
    classpath 'org.yaml:snakeyaml:1.14'
  }
}

apply plugin: 'org.hidetake.ssh'
import org.yaml.snakeyaml.Yaml
        

/*
--------------------------------------------------------------
PROPERTIES
--------------------------------------------------------------
*/
version = "1.0"
sourceCompatibility = "1.8"
ext{
	mainClassName = "it.unibo.ctxRover.MainCtxRover"
}
/*
--------------------------------------------------------------
DIRS
--------------------------------------------------------------
*/
sourceSets {
	main {
		java {
			srcDirs = ['src' , 'src-gen'  ]
			exclude 'dist/'
		}
	}
	test {
		 java {
		   srcDirs = ['test']
		 }
	}
}
/*
--------------------------------------------------------------
DEPENDENCIES
--------------------------------------------------------------
*/
repositories {
      mavenCentral()
}
dependencies {
/*
BASIC SUPPORT (test, akka)
*/	
      testCompile 'junit:junit:4.12'
     // https://mvnrepository.com/artifact/com.typesafe.akka/akka-actor_2.11
	  compile group: 'com.typesafe.akka', name: 'akka-actor_2.11', version: '2.5.1'
	 // https://mvnrepository.com/artifact/com.typesafe.akka/akka-remote_2.11
	 compile group: 'com.typesafe.akka', name: 'akka-remote_2.11', version: '2.5.1'	 
     
/*
UNIBO SUPPORTS
*/		
	  compile fileTree(dir: '../it.unibo.iss.libs/libs/unibo', include: 'uniboInterfaces.jar')
	  compile fileTree(dir: '../it.unibo.iss.libs/libs/unibo', include: 'unibonoawtsupports.jar')
	  compile fileTree(dir: '../it.unibo.iss.libs/libs/unibo', include: 'uniboEnvBaseAwt.jar')
	  compile fileTree(dir: '../it.unibo.iss.libs/libs/unibo', include: '2p301.jar')
	  compile fileTree(dir: '../it.unibo.iss.libs/libs/unibo', include: 'qa18Akka.jar')
	  compile fileTree(dir: '../it.unibo.iss.libs/libs/http',  include: 'nanoHTTPD.jar')
/*
JSON
*/
	  
	  // https://mvnrepository.com/artifact/org.json/json
	  compile group: 'org.json', name: 'json', version: '20160810'
	  
/*
MQTT
*/
 	// https://mvnrepository.com/artifact/org.eclipse.paho/org.eclipse.paho.client.mqttv3
	compile group: 'org.eclipse.paho', name: 'org.eclipse.paho.client.mqttv3', version: '1.1.0'

/*
TO BE ADDED by the application designer: BLUETOOTH
*/
	  //compile fileTree(dir: '../it.unibo.iss.libs/libs/bth', include: 'bluecove-2.1.1-SNAPSHOT.jar')
	  //compile fileTree(dir: '../it.unibo.iss.libs/libs/bth', include: 'bluecove-gpl-2.1.1-SNAPSHOT.jar')

/*
TO BE ADDED by the application designer: Raspberry GPIO support
*/	
// https://mvnrepository.com/artifact/com.pi4j/pi4j-core

 compile group: 'com.pi4j', name: 'pi4j-core', version: '1.1'
 /*
 ROBOTS
 */
 compile fileTree(dir: '../it.unibo.iss.libs/libs/unibo', include: 'labbaseRobotSam.jar')
 compile fileTree(dir: '../it.unibo.iss.libs/libs/unibo', include: 'uniboQactorRobot.jar')
 /*
 SONAR
 */
 compile fileTree(dir: '../Sonar/sonarRasp/', include: '*.jar')
    
/*
ROBOTS
*/ 	 
	 compile fileTree(dir: '../it.unibo.iss.libs/libs/unibo', include: 'labbaseRobotSam.jar')
	 compile fileTree(dir: '../it.unibo.iss.libs/libs/unibo', include: 'uniboQactorRobot.jar') 
/*
TO BE ADDED by the application designer for ButtonLed  
*/	
//compile fileTree(dir: '../it.unibo.iss.libs/libs/unibo', include: 'blsHL.jar')
//compile fileTree(dir: '../it.unibo.iss.libs/libs/unibo', include: 'blsGUI.jar')
//compile fileTree(dir: '../it.unibo.iss.libs/libs/unibo', include: 'blsRasp.jar')

/*
TO BE ADDED by the application designer for: RXJAVA
*/
	//https://mvnrepository.com/artifact/io.reactivex.rxjava2/rxjava
	//compile group: 'io.reactivex.rxjava2', name: 'rxjava', version: '2.0.6' 
}

/*
TO BE ADDED by the application designer for : 
*/
	// https://mvnrepository.com/artifact/log4j/log4j
    //compile group: 'log4j', name: 'log4j', version: '1.2.16'


/*
--------------------------------------------------------------
AFTER TEST
--------------------------------------------------------------
*/
test {
    afterTest { desc, result -> 
        println "Executing test ${desc.name} [${desc.className}] with result: ${result.resultType}"
    }
}
/*
---------------------------------------------------------------------
JAR: incldes src-gen code (excluding Java) in the executable jar
---------------------------------------------------------------------
*/
jar {
   	from( 'src-gen' ){ include '**/*.*'	 exclude '**/*.java'  }
 	manifest {
 		attributes "Class-Path": '.  ' + configurations.compile.collect { "lib/"+it.getName() }.join(' ')
		attributes 'Main-Class': "$mainClassName"
	}
}
distributions {
    main{
        baseName = "$mainClassName"
    }
}
/*
---------------------------------------------------------
PREPARE DISTRIBUTION
---------------------------------------------------------
*/
task copyInfoForDist << {
	copy {
		from 'audio'
		into 'src/dist/audio/'
		include '**/*.*'
 	}
copy {
	from 'configuration'
	into 'src/dist/configuration/'
	include '**/*.*'
 	}
	copy { 
		from 'srcMore'
		into 'src/dist/srcMore/'
		include '**/*.*'
 	}
	copy { 
		from '.'
		into 'src/dist/'
		include '*.pl'
		include '*.html'
		include 'hardwareConfiguration.properties'
 	}
	copy {  
		from 'src'
		into 'src/dist/'
		include '*.qa'
		include '*.ddr'
		include '*.baseddr'
   	}
}
task cleanDistDir(type: Delete) {
	  delete 'src/dist'
      
  }
jar.dependsOn cleanDistDir

jar.dependsOn copyInfoForDist
/*
---------------------------------------------------------
DEPLOYMENT
---------------------------------------------------------
*/

def deploymentDir = "/home/pi/deploy-${mainClassName}-${version}"
def completeName = "$mainClassName-$version"
def tarFile = "${completeName}.tar"

def yaml = new Yaml()
def fistream = new FileInputStream("../Utils/contextConfig.yaml")
def systemConfig = (Map) yaml.load(fistream)
def contextName = mainClassName.tokenize('.')[2]

remotes {
  raspberry {
    //host = '192.168.1.213'
    host = systemConfig[ambiente][contextName]['host']
    user = 'pi'
    password = 'raspberry'
    //identity = file('id_rsa')
  }
}

task prepareRemote {
	doLast {
		ssh.run{
			session(remotes.raspberry){
				execute "mkdir -p $deploymentDir"
			}
		}
	}
}

task deploy {
  inputs.files(file("build/distributions/${tarFile}"))

  dependsOn 'build', 'prepareRemote'

  doLast {
    ssh.run {
	  session(remotes.raspberry) {
	    println "Copying distribution to remote"
	    put from: inputs.files, into: '/tmp/'

	    println "Extracting remote distribution"
	    execute "tar -xvf /tmp/$tarFile -C $deploymentDir"

	    println "Cleaning..."
	    remove "/tmp/$tarFile"
	  }
	}
  }
}

task jarDeploy {
  inputs.files(file("build/libs/*.jar"))

  dependsOn 'build', 'prepareRemote'

  doLast {
    ssh.run {
	  session(remotes.raspberry) {
	    println "Copying distribution to remote"
	    put from: inputs.files, into: '$deploymentDir/${completeName}/'
	  }
	}
  }
}

/*
---------------------------------------------------------
RUN REMOTE
---------------------------------------------------------
*/
task executeRemote {
  doLast {
    ssh.run {
      session(remotes.raspberry) {
      	println "Executing -- ${jar.archiveName}"
        executeSudo "bash -c \"cd $deploymentDir/$completeName; java -jar ${jar.archiveName}\""
      }
    }
  }
}
        
/*
---------------------------------------------------------
TESTING
---------------------------------------------------------
*/
test {
	testLogging {
		outputs.upToDateWhen { false }		
		showStandardStreams = true		
		events 'failed' , 'passed' //,  'started', 'skipped', 		
	}
	
 	include '**/Test*.class'
	test.afterSuite { TestDescriptor suite, TestResult result -> //add closure to be notified
	if( !suite.parent && result.getTestCount() > 0) { //there is at least one test
		long elapsedTestTime = result.getEndTime() - result.getStartTime()
 		System.out.println("""AFTERTEST Elapsed time for execution of ${result.getTestCount()} test(s):  $elapsedTestTime ms""");
	}
	}
}

test.finalizedBy jacocoTestReport

jacocoTestReport {
     reports {
        xml.enabled false
        csv.enabled false
        html.destination "${buildDir}/jacocoHtml"
    }
}


/*
---------------------------------------------------------------------
SYS CONFIG: modifica tutti quanti i file prolog con le configurazioni di rete prima della compilazione
---------------------------------------------------------------------
*/

task configureSystem(type: Exec) {

	commandLine 'python', '../Utils/applySystemConfig.py', ambiente

}

assemble.dependsOn(configureSystem)
