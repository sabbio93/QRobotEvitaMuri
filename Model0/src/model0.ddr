/*        
 * ==============================================================
 * radargui.qa       
 * ==============================================================
 */
RobotSystem model0

Event roverOnB : roverOnB
Event cmd : cmd(X)
Event sonar : sonar(Nome,Oggetto,Distanza)

Context ctxRover ip [host="localhost" port=8070] -httpserver //192.168.251.1
Context ctxSonarArrivo ip [host="localhost" port=8035]	//192.168.251.3

/* Il sonar ciclicamente emette un evento contenente 
 * la distanza che rileva, questa viene utilizzata per verificare
 * se il rover è passato, dunque arrivato al punto B
 */
 
//QActor sonarb context ctxSonarArrivo {	//MOCK
//	Plan init normal
//		switchToPlan attesa;
//		actorOp initSonar
//	Plan attesa resumeLastPlan
//		sense time(600000) cmd -> continue;
//		emit roverOnB : roverOnB	
//}
QActor sonarb context ctxSonarArrivo {	//UNITY
	Plan rileva normal
		sense time(600000) sonar -> continue;
		onEvent sonar : sonar(sonar2,rover,D) -> emit roverOnB : roverOnB;
	 	repeatPlan
}

Robot mock QActor rover context ctxRover {
	Rules {
		unity.
	}
	Plan init normal
		println("INIZIO");
		[!?unity] switchToPlan initUnity;
		switchToPlan attesa
		
	Plan initUnity resumeLastPlan
		actorOp workWithUnity("localhost");
		actorOp initPosition;
		robotRight speed(100) time(2000);
		println("Inizializzazione Unity completata")
	/*
	 * R2: Il robot comincia a muoversi alla pressione del tasto start
	 */
	Plan attesa
		sense time(600000) cmd -> continue;
		onEvent cmd:cmd(start)->switchToPlan traversata;
		repeatPlan

	/*
	 * R1: Il robot si muove in avanti fino a quando non è arrivato a destinazione
	 */
  	Plan traversata resumeLastPlan
		println("Inizio traversata");
		robotForward speed(40) time(600000) react event roverOnB -> fermaRobot
 	
 	Plan fermaRobot
 		println("Stop requested");
 		robotStop speed(0) time(0)
}