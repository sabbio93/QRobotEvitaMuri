/*        
 * ==============================================================
 * radargui.qa       
 * ==============================================================
 */
RobotSystem model0

Event data : distanza(X, d(D))
Event stop : fermaRobot
Event cmd : cmd(X)

Context ctxRover ip [host="localhost" port=8070] -httpserver	//192.168.251.1
Context ctxSonarArrivo ip [host="localhost" port=8035]	//192.168.251.3

QActor sonarb context ctxSonarArrivo {
	/* Il sonar ciclicamente emette un evento contenente 
	 * la distanza che rileva, questa viene utilizzata per verificare
	 * se il rover Ã¨ passato, dunque arrivato al punto B
	 */
	Plan init normal
		println("ctxSonarArrivo Inizio");
		switchToPlan attesa;
		println("è iniziato");
		actorOp initSonar;
		//[!?unity] delay time(100000);///////////
		switchToPlan rileva
	Plan attesa resumeLastPlan
		sense time(600000) cmd -> continue;
		onEvent cmd:cmd(X)->println(ricevuto_comando(X));
		onEvent cmd:cmd(start)->println("start") else repeatPlan
	Plan rileva
		delay time(600000);
		repeatPlan
}
QActor rilevatorearrivo context ctxSonarArrivo {
	Rules {
		// se rilevo qualcosa sotto i 100 cm allora il robot Ã¨ arrivato
		checkroverarrivato(D,A):-eval(lt,D,100),!,assert(arrivato(rover)).
		checkroverarrivato(D,A).
		//unity.
	}
	/* Il sonar ciclicamente emette un evento contenente 
	 * la distanza che rileva, questa viene utilizzata per verificare
	 * se il rover Ã¨ passato, dunque arrivato al punto B
	 */
	Plan rileva normal
		sense time(600000) data -> continue;
		println("evento data ricevuto");
		printCurrentEvent;
		onEvent data : distanza(X, d(D)) -> demo checkroverarrivato(D, X);
	 	[!? arrivato(rover)] println(arrivato) else println(non_arrivato);
	 	[!? arrivato(rover)] emit stop : fermaRobot;
	 	[?? arrivato(rover)] println ("stop");
	 	repeatPlan
}

Robot mock QActor rover context ctxRover {
	Rules {
		unity.
	}
	Plan init normal
		println("INIZIO");
		[!?unity] switchToPlan initUnity;
		switchToPlan attesa
		
	Plan initUnity resumeLastPlan
		actorOp workWithUnity("localhost");
		println("Connesso a Unity");
		actorOp initPosition;//createSimulatedActor("rover","Prefabs/CustomActor","-25","0","10","0","0","0","0");//,0,0,10,0,0,0,90);
		robotRight speed(100) time(2000);
		println("Inizializzazione Unity completata")
	/*
	 * R2: Il robot comincia a muoversi alla pressione del tasto start
	 */
	Plan attesa
		sense time(600000) cmd -> continue;
		printCurrentEvent;
		onEvent cmd:cmd(X)->println(ricevuto_comando(X));
		onEvent cmd:cmd(start)->switchToPlan traversata;
		//[!?cmd(X)] println("ricevuto comando X");
		//[??cmd(start)] switchToPlan traversata;
		repeatPlan

	/*
	 * R1: Il robot si muove in avanti fino a quando non Ã¨ arrivato a destinazione
	 */
  	Plan traversata resumeLastPlan
		println("Inizio traversata");
		robotForward speed(100) time(600000) react event stop -> fermaRobot
 	
 	Plan fermaRobot
 		println("Stop requested");
 		robotStop speed(0) time(0)
}