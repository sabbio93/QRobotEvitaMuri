RobotSystem m10

Event robotDetected : robotDetected(Sonar,Distanza)
Event robotLeave : robotLeave(Sonar)
Event ostacolo : ostacolo
Event usercmd: usercmd(robotgui(X))
Event cmd : cmd(X)
Event alarm : alarm(X)
Dispatch comando : comando(X)
Dispatch comando2 : comando(X,Y)
Dispatch terminataProcedura : terminataProcedura(X)
Event stop : stop

//Context  ctxRover  			ip [host="192.168.251.1" port=8070] -httpserver//NOTE elimino un qa dai giochi
//Context  ctxSonarArrivo     ip [host="192.168.251.3" port=8035]   
//Context  ctxSonarPartenza   ip [host="192.168.251.4" port=8036]  
Context  ctxController      ip [host="127.0.0.1" port=8040] -httpserver
Context  ctxRover  			ip [host="localhost" port=8070] 

QActor mockstart context ctxController {
	Plan avvia normal
		delay time(5000);
		emit cmd:cmd(start)//;
//		delay time(12000);
//		emit alarm:alarm(fire)
}

QActor robotmind context ctxController {

    Rules {
		/* da WorldTheory del prof:
		 * assign(I,V):-retract(value(I,_)),!,assert(value(I,V)).
		 * assign(I,V):-assert(value(I,V)).
		 * eval(plus,V1,V2,R):-R is V1+V2.
		 * eval(minus,V1,V2,R):-R is V1-V2.
		 * eval(times,V1,V2,R):-R is V1*V2.
		 * eval(div,V1,V2,R):-R is V1/V2.
		 * eval(lt,X,Y):-X<Y.
		 * eval(gt,X,Y):-X>Y.
		 */
		
		/*Dictionary
		D=distanza iniziale
		DM = dm (dimensione stanza)
		L = ampiezzaSonar
		DR = DM - D (distanza dal muro)
		L2 = L/2
		DM2 = DM/2
		 */
		 
		/*costanti note del problema*/
		value(dm,70).	/*lato della stanza (quadrata)*/
		value(incertezza,2).
		value(ampiezzaSonar,7).
		
		//salvaDistanzaIniziale(D):-assert(davanti(sonara,rover)),eval(plus,D,10,D1),assign(distanzaIniziale,D1).
		salvaDistanzaIniziale(D):-assert(davanti(sonara,rover)),assign(distanzaIniziale,D).
		
		gap(destra,Delta):-value(distanzaB,D),value(incertezza,I),value(distanzaIniziale,Di),eval(minus,Di,I,Dmin), eval(lt,D,Dmin),!,eval(minus,Dmin,D,Delta).
		gap(sinistra,Delta):-value(distanzaB,D),value(incertezza,I),value(distanzaIniziale,Di),eval(plus,Di,I,DMAX), eval(gt,D,DMAX),!,eval(minus,D,DMAX,Delta).
		gap(no,0).
		
		caricaPossibiliDirezioni:-value(distanzaIniziale,D),value(dm,DM), eval(div,DM,2,DM2), eval(gt,D,DM2),!,caricaDestra,caricaSinistra.
		caricaPossibiliDirezioni:-caricaSinistra,caricaDestra.
		
		caricaDestra:-possibilePassaggioADestra,assert(possibileDirezione(destra)).
		caricaSinistra:-possibilePassaggioASinistra,assert(possibileDirezione(sinistra)).
		
		possibilePassaggioADestra:-value(distanzaIniziale,D),value(dm,DM),value(ampiezzaSonar,L), eval(minus,DM,D,DR),eval(div,L,2,L2), eval(gt,DR,L2).
		possibilePassaggioASinistra:-value(distanzaIniziale,D),value(ampiezzaSonar,L), eval(div,L,2,L2), eval(gt,D,L2).
	}
	
	Plan init normal
		println("controller starts");
		switchToPlan aspettaEventi
	
	//procedura di attesa eventi=> cerco di capire cosa è stato rilevato e reagisco di conseguenza
	Plan aspettaEventi
		println("in ascolto");
		sense time(600000) robotLeave, robotDetected, cmd, ostacolo -> continue, continue, continue, continue;
		printCurrentEvent;
		
		//il rover è davanti al sonar a ed ho ricevuto il comando start
		[!? davanti(sonara,rover)] onEvent cmd:cmd(start) -> forward rover -m comando:comando(avanti); 
		[!? davanti(sonara,rover)] println(davanti(sonara,rover)); 
		
		//modifico la mia conoscenza interna sulla posizione del rover rispetto ai sonar
		[!? davanti(sonara,rover)] onEvent robotLeave:robotLeave(sonara) -> removeRule davanti(sonara,rover)
						   else onEvent robotDetected:robotDetected(sonara,D) -> demo salvaDistanzaIniziale(D);
		onEvent ostacolo:ostacolo -> switchToPlan valutaOstacolo;
		onEvent robotDetected:robotDetected(sonarb,D) -> demo assign(distanzaB,D); //arrivato quasi a destinazione
		onEvent robotDetected:robotDetected(sonarb,D) -> emit stop:stop;
		onEvent robotDetected:robotDetected(sonarb,D) -> switchToPlan risolviGap;
		repeatPlan
	
	//procedura per colmare il gap fra distanza di arrivo e punto target	
	Plan risolviGap resumeLastPlan
		println("piano risolviGap");
		demo gap(Dir,Dist);
		[!? goalResult(G)] println(G);
		[?? goalResult(gap(destra,D))] forward rover -m comando:comando(destra);
		[?? goalResult(gap(sinistra,D))] forward rover -m comando:comando(sinistra);
		[?? goalResult(gap(no,D))] endPlan "" else switchToPlan controlloPosizione

	//valutazione della distanza dal punto di arrivo target
	Plan controlloPosizione resumeLastPlan
		println("piano controlloPosizione");
		sense time(600000) robotDetected, ostacolo -> continue, continue;
		printCurrentEvent;
		onEvent ostacolo:ostacolo -> switchToPlan valutaOstacolo;
		onEvent robotDetected:robotDetected(sonarb,D) -> demo assign(distanzaB,D);
		onEvent robotDetected:robotDetected(sonarb,D) -> demo gap(Dir,Dist);
		[!? goalResult(gap(Dir,D))] println(D);
		[?? goalResult(gap(Dir,0))] onEvent robotDetected:robotDetected(sonarb,D) -> emit stop:stop else repeatPlan

	//valutazione dell'ostacolo per capire se è fisso o mobile
	Plan valutaOstacolo resumeLastPlan
		delay time(2000);
		sense time(500) ostacolo -> continue;
		[!? tout(senseevent,QA)] forward rover -m comando:comando(avanti);
		[?? tout(senseevent,QA)] endPlan "";
		onEvent ostacolo : ostacolo -> println("Ostacolo fisso");
		onEvent ostacolo : ostacolo -> switchToPlan ricercaVarco	//In realt� nell'attuale implementazione di qactor non termina
	
	Plan ricercaVarco
		demo caricaPossibiliDirezioni;
		switchToPlan scegliDirezioneRicerca
	
	Plan scegliDirezioneRicerca
		demo possibileDirezione(D) onFailSwitchTo errore;
		[?? goalResult(possibileDirezione(destra))] switchToPlan ricercaVarcoDestra;
		[?? goalResult(possibileDirezione(sinistra))] switchToPlan ricercaVarcoSinistra
		
	/*piano per la ricerca a destra del varco attraverso cui passare
	 * il piano si divide in 2 fasi:
	 	Fase1: controllo che non ci siano muri a destra(segnerebbe la fine del percorso)
	 			 e mi sposto a destra
	 	Fase2: Continuo verso Nord rimettendomi in attesa di eventi di altri 
	 			oggetti(o lo stesso che continua)*/ 
	Plan ricercaVarcoDestra resumeLastPlan
		println("piano ricercaVarcoDestra");
		//TODO valutazione prolog della distanza dalla fine del tracciato #39
		//troppo piccola e println,lo scrivo nella mia WT
		[!? value(destra,N)] demo inc(destra,1,N1) else demo assign(destra,0);
		forward rover -m comando:comando(varcoDestra);
		receiveTheMsg m(terminataProcedura,dispatch,rover,robotmind,terminataProcedura(X),N) time(600000);
		onMsg terminataProcedura:terminataProcedura(X) -> println(X);
		onMsg terminataProcedura:terminataProcedura(X) -> addRule X;	//con onMsg esegue sempre anche muroDavanti senza controllare il contenuto
		[!? libero] forward rover -m comando:comando(avanti);
		[?? libero] switchToPlan fineRicerca;
		[?? muroDiFianco] switchToPlan riposizionaDaDestra;
		[?? muroDavanti] repeatPlan
		
	Plan ricercaVarcoSinistra resumeLastPlan
		println("piano ricercaVarcoSinistra");
		//TODO valutazione prolog della distanza dalla fine del tracciato #39
		//troppo piccola e println,lo scrivo nella mia WT
		[!? value(sinistra,N)] demo inc(sinistra,1,N1) else demo assign(sinistra,0);
		forward rover -m comando:comando(varcoSinistra);
		receiveTheMsg m(terminataProcedura,dispatch,rover,robotmind,terminataProcedura(X),N) time(600000);
		onMsg terminataProcedura:terminataProcedura(X) -> println(X);
		onMsg terminataProcedura:terminataProcedura(X) -> addRule X;	//con onMsg esegue sempre anche muroDavanti senza controllare il contenuto
		[!? libero] forward rover -m comando:comando(avanti);
		[?? libero] switchToPlan fineRicerca;
		[?? muroDiFianco] switchToPlan riposizionaDaSinistra;
		[?? muroDavanti] repeatPlan
		
	Plan fineRicerca
		removeRule possibileDirezione(destra);
		removeRule possibileDirezione(sinistra);
		removeRule value(destra,N);
		removeRule value(sinistra,N);
		switchToPlan aspettaEventi
	
	Plan riposizionaDaDestra
		[!? value(destra,N)] println(riposizionamentoDiPassi(N));
		removeRule possibileDirezione(destra);
		[?? value(destra,N)] forward rover -m comando2:comando(sinistra,N);
		switchToPlan scegliDirezioneRicerca
	
	Plan riposizionaDaSinistra
		[!? value(sinistra,N)] println(riposizionamentoDiPassi(N));
		removeRule possibileDirezione(sinistra);
		[?? value(sinistra,N)] forward rover -m comando2:comando(destra,N);
		switchToPlan scegliDirezioneRicerca
	
	Plan errore
		endQActor "Nessun sentiero possibile"

	Plan controlloUtente
	println("do il controllo all'utente");
	forward rover -m comando:comando(riceviComandiUtente);
	switchToPlan aspettaEventi
}

Robot mock QActor rover context ctxRover {	 

	Rules {
		unity.
		
		tempo(D,T):-value(D,N),eval(times,600,N,T).
	}
	
	Plan init normal
		[!?unity] switchToPlan initUnity;
		switchToPlan aspettaComando
		
	Plan initUnity resumeLastPlan
		actorOp workWithUnity("localhost");
		actorOp initPosition;
		robotRight speed(100) time(1000);
		println("Inizializzazione Unity completata")
		
	//Piano di attesa comandi 
	Plan aspettaComando resumeLastPlan //normal        
		receiveMsg time(600000);
		onMsg comando:comando(avanti) -> switchToPlan traversata;
		onMsg comando:comando(destra) -> switchToPlan recuperaDx;
		onMsg comando:comando(sinistra) -> switchToPlan recuperaSx;
		onMsg comando:comando(varcoDestra) -> switchToPlan cercaVarcoDestra;
		onMsg comando:comando(varcoSinistra) -> switchToPlan cercaVarcoSinistra;
		onMsg comando2:comando(destra,N) -> demo assign(destra,N);
		onMsg comando2:comando(destra,N) -> switchToPlan passiADestra;
		onMsg comando2:comando(sinistra,N) -> demo assign(sinistra,N);
		onMsg comando2:comando(sinistra,N) -> switchToPlan passiASinistra;
		onMsg comando:comando(riceviComandiUtente) -> switchToPlan riceviComandiUtente;
		repeatPlan
		
	//Piano base di attraversata del percorso dritto con termine all'evento stop	
	Plan traversata resumeLastPlan
		println("Inizio traversata");
		robotForward speed(15) time(600000) react event stop -> fermaRobot or event alarm -> gestisciAllarme or event ostacolo -> fermaRobot
	
	//Piano per fermare il robot
	Plan fermaRobot
		robotStop speed(0) time(0);
		switchToPlan aspettaComando
	
	//Piano per recuperare a destra il gap finale
	Plan recuperaDx resumeLastPlan
		robotRight speed(100) time(1000) react event stop -> fermaRobot or event alarm -> gestisciAllarme;// or event ostacolo -> fermaRobot;
		switchToPlan traversata
	
	//Piano per recuperare a sinistra il gap finale
	Plan recuperaSx resumeLastPlan
		robotLeft speed(100) time(1000) react event stop -> fermaRobot or event alarm -> gestisciAllarme;// or event ostacolo -> fermaRobot;
		switchToPlan traversata
    
    //Piano di gestione evento allarme
    Plan gestisciAllarme
    	println("ALLARME! ALLARME!");
		robotStop speed(0) time(0)

	//Procedura di esplorazione presenza del muro a destra
	Plan cercaVarcoDestra
		//vado un pelo indietro per scrupolo necessario soprattuto nel fisico
		robotBackward speed(15) time(200) react event stop -> fermaRobot or event alarm -> gestisciAllarme;
		robotRight speed(100) time(1000) react event stop -> fermaRobot or event alarm -> gestisciAllarme;
		robotForward speed(15) time(800) react event stop -> fermaRobot or event alarm -> gestisciAllarme or event ostacolo -> muroDiFianco;	//TODO trovo tempi di quanto fare andare avanti il robot empiricamente per Unity e per Robot #41
		robotLeft speed(100) time(1000) react event stop -> fermaRobot or event alarm -> gestisciAllarme;
		robotForward speed(15) time(600) react event stop -> fermaRobot or event alarm -> gestisciAllarme or event ostacolo -> muroDavanti;
		forward robotmind -m terminataProcedura:terminataProcedura(libero);
		switchToPlan aspettaComando
	
	//Procedura di esplorazione presenza del muro a destra
	Plan cercaVarcoSinistra
		//vado un pelo indietro per scrupolo necessario soprattuto nel fisico
		robotBackward speed(15) time(200) react event stop -> fermaRobot or event alarm -> gestisciAllarme;
		robotLeft speed(100) time(1000) react event stop -> fermaRobot or event alarm -> gestisciAllarme;
		robotForward speed(15) time(800) react event stop -> fermaRobot or event alarm -> gestisciAllarme or event ostacolo -> muroDiFianco;	//TODO trovo tempi di quanto fare andare avanti il robot empiricamente per Unity e per Robot #41
		robotRight speed(100) time(1000) react event stop -> fermaRobot or event alarm -> gestisciAllarme;
		robotForward speed(15) time(600) react event stop -> fermaRobot or event alarm -> gestisciAllarme or event ostacolo -> muroDavanti;
		forward robotmind -m terminataProcedura:terminataProcedura(libero);
		switchToPlan aspettaComando
	
	Plan muroDiFianco
		forward robotmind -m terminataProcedura:terminataProcedura(muroDiFianco);
		switchToPlan fermaRobot
	
	Plan muroDavanti
		forward robotmind -m terminataProcedura:terminataProcedura(muroDavanti);
		switchToPlan fermaRobot
	
	Plan passiADestra
		robotRight speed(100) time(1000) react event stop -> fermaRobot or event alarm -> gestisciAllarme;	//parte voltato nel verso opposto
		robotRight speed(100) time(1000) react event stop -> fermaRobot or event alarm -> gestisciAllarme;
		[!? tempo(destra,T)] robotForward speed(15) time(T) react event stop -> fermaRobot or event alarm -> gestisciAllarme or event ostacolo -> fermaRobot;
		robotLeft speed(100) time(1000) react event stop -> fermaRobot or event alarm -> gestisciAllarme;
		robotForward speed(15) time(600000) react event stop -> fermaRobot or event alarm -> gestisciAllarme or event ostacolo -> fermaRobot; //per eliminare eventuali allontanamenti dal muro durante il riposizionamento
		switchToPlan aspettaComando
	
	Plan passiASinistra
		robotLeft speed(100) time(1000) react event stop -> fermaRobot or event alarm -> gestisciAllarme;	//parte voltato nel verso opposto
		robotLeft speed(100) time(1000) react event stop -> fermaRobot or event alarm -> gestisciAllarme;
		[!? tempo(sinistra,T)] robotForward speed(15) time(T) react event stop -> fermaRobot or event alarm -> gestisciAllarme or event ostacolo -> fermaRobot;
		robotRight speed(100) time(1000) react event stop -> fermaRobot or event alarm -> gestisciAllarme;
		robotForward speed(15) time(600000) react event stop -> fermaRobot or event alarm -> gestisciAllarme or event ostacolo -> fermaRobot; //per eliminare eventuali allontanamenti dal muro durante il riposizionamento
		switchToPlan aspettaComando
	
	Plan riceviComandiUtente resumeLastPlan //normal   
		println("attendo comandi da parte dell'utente");     
		sense time(600000)usercmd,stop,alarm,ostacolo->continue,fermaRobot,gestisciAllarme,fermaRobot;
		onEvent usercmd:usercmd(robotgui(C)) -> addRule C;
		[?? w(V)] robotForward speed(15) time(0) react event stop -> fermaRobot or event alarm -> gestisciAllarme or event ostacolo -> fermaRobot;
		[?? a(V)] robotLeft speed(100) time(1000)react event stop -> fermaRobot or event alarm -> gestisciAllarme or event ostacolo -> fermaRobot;
		[?? d(V)] robotRight speed(100) time(1000)react event stop -> fermaRobot or event alarm -> gestisciAllarme or event ostacolo -> fermaRobot;
		[?? s(V)] robotBackward speed(15) time(0)react event stop -> fermaRobot or event alarm -> gestisciAllarme or event ostacolo -> fermaRobot;
		[?? h(V)] robotStop speed(0) time(0)react event stop -> fermaRobot or event alarm -> gestisciAllarme or event ostacolo -> fermaRobot;
		robotStop speed(0) time(0);
		repeatPlan
}
