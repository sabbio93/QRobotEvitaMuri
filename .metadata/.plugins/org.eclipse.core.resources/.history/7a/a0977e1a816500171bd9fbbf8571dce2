/* Generated by AN DISI Unibo */ 
package it.unibo.robotmind;
import alice.tuprolog.Struct;
import alice.tuprolog.Term;
import it.unibo.qactors.QActorContext;
import it.unibo.qactors.ActorTerminationMessage;
import it.unibo.qactors.QActorMessage;
import it.unibo.qactors.QActorUtils;
import it.unibo.contactEvent.interfaces.IEventItem;
import it.unibo.is.interfaces.IOutputEnvView;
import it.unibo.qactors.action.ActionReceiveTimed;
import it.unibo.qactors.action.AsynchActionResult;
import it.unibo.qactors.action.IActorAction;
import it.unibo.qactors.action.IActorAction.ActionExecMode;
import it.unibo.qactors.action.IMsgQueue;
import it.unibo.qactors.akka.QActor;


//REGENERATE AKKA: QActor instead QActorPlanned
public abstract class AbstractRobotmind extends QActor { 
	protected AsynchActionResult aar = null;
	protected boolean actionResult = true;
	protected alice.tuprolog.SolveInfo sol;
	//protected IMsgQueue mysupport ;  //defined in QActor
	protected String planFilePath    = null;
	protected String terminationEvId = "default";
	protected String parg="";
	protected boolean bres=false;
	protected IActorAction  action;
	
			protected static IOutputEnvView setTheEnv(IOutputEnvView outEnvView ){
				return outEnvView;
			}
	
	
		public AbstractRobotmind(String actorId, QActorContext myCtx, IOutputEnvView outEnvView )  throws Exception{
			super(actorId, myCtx,  
			"./srcMore/it/unibo/robotmind/WorldTheory.pl",
			setTheEnv( outEnvView )  , "init");		
			this.planFilePath = "./srcMore/it/unibo/robotmind/plans.txt";
			//Plan interpretation is done in Prolog
			//if(planFilePath != null) planUtils.buildPlanTable(planFilePath);
	 	}
		@Override
		protected void doJob() throws Exception {
			String name  = getName().replace("_ctrl", "");
			mysupport = (IMsgQueue) QActorUtils.getQActor( name ); 
	 		initSensorSystem();
			boolean res = init();
			//println(getName() + " doJob " + res );
			QActorContext.terminateQActorSystem(this);
		} 
		/* 
		* ------------------------------------------------------------
		* PLANS
		* ------------------------------------------------------------
		*/
	    public boolean init() throws Exception{	//public to allow reflection
	    try{
	    	int nPlanIter = 0;
	    	//curPlanInExec =  "init";
	    	boolean returnValue = suspendWork;		//MARCHH2017
	    while(true){
	    	curPlanInExec =  "init";	//within while since it can be lost by switchlan
	    	nPlanIter++;
	    		temporaryStr = "\"controller starts\"";
	    		println( temporaryStr );  
	    		if( ! planUtils.switchToPlan("aspettaEventi").getGoon() ) break;
	    break;
	    }//while
	    return returnValue;
	    }catch(Exception e){
	       //println( getName() + " plan=init WARNING:" + e.getMessage() );
	       QActorContext.terminateQActorSystem(this); 
	       return false;  
	    }
	    }
	    public boolean aspettaEventi() throws Exception{	//public to allow reflection
	    try{
	    	int nPlanIter = 0;
	    	//curPlanInExec =  "aspettaEventi";
	    	boolean returnValue = suspendWork;		//MARCHH2017
	    while(true){
	    	curPlanInExec =  "aspettaEventi";	//within while since it can be lost by switchlan
	    	nPlanIter++;
	    		temporaryStr = "\"in ascolto\"";
	    		println( temporaryStr );  
	    		//senseEvent
	    		aar = planUtils.senseEvents( 600000,"robotLeave,robotDetected,cmd,ostacolo","continue,continue,continue,continue",
	    		"" , "",ActionExecMode.synch );
	    		if( ! aar.getGoon() || aar.getTimeRemained() <= 0 ){
	    			//println("			WARNING: sense timeout");
	    			addRule("tout(senseevent,"+getName()+")");
	    		}
	    		printCurrentEvent(false);
	    		if( (guardVars = QActorUtils.evalTheGuard(this, " !?davanti(sonara,rover)" )) != null ){
	    		//onEvent
	    		if( currentEvent.getEventId().equals("cmd") ){
	    		 		String parg="comando(avanti)";
	    		 		parg = updateVars( Term.createTerm("cmd(X)"),  Term.createTerm("cmd(start)"), 
	    		 			    		  					Term.createTerm(currentEvent.getMsg()), parg);
	    		 		if( parg != null ) sendMsg("comando","rover", QActorContext.dispatch, parg ); 
	    		 }
	    		}
	    		if( (guardVars = QActorUtils.evalTheGuard(this, " !?davanti(sonara,rover)" )) != null ){
	    		temporaryStr = "davanti(sonara,rover)";
	    		temporaryStr = QActorUtils.substituteVars(guardVars,temporaryStr);
	    		println( temporaryStr );  
	    		}
	    		if( (guardVars = QActorUtils.evalTheGuard(this, " !?davanti(sonara,rover)" )) != null ){
	    		//onEvent
	    		if( currentEvent.getEventId().equals("robotLeave") ){
	    		 		String parg="davanti(sonara,rover)";
	    		 		parg = updateVars( Term.createTerm("robotLeave(Sonar)"),  Term.createTerm("robotLeave(sonara)"), 
	    		 			    		  					Term.createTerm(currentEvent.getMsg()), parg);
	    		 		if( parg != null ) removeRule(parg);
	    		 }
	    		}
	    		else{ //onEvent
	    		if( currentEvent.getEventId().equals("robotDetected") ){
	    		 		String parg="salvaDistanzaIniziale(D)";
	    		 		parg = updateVars( Term.createTerm("robotDetected(Sonar,Distanza)"),  Term.createTerm("robotDetected(sonara,D)"), 
	    		 			    		  					Term.createTerm(currentEvent.getMsg()), parg);
	    		 			if( parg != null ) {
	    		 			    aar = QActorUtils.solveGoal(this,myCtx,pengine,parg,"",outEnvView,86400000);
	    		 				//println(getName() + " plan " + curPlanInExec  +  " interrupted=" + aar.getInterrupted() + " action goon="+aar.getGoon());
	    		 				if( aar.getInterrupted() ){
	    		 					curPlanInExec   = "aspettaEventi";
	    		 					if( aar.getTimeRemained() <= 0 ) addRule("tout(demo,"+getName()+")");
	    		 					if( ! aar.getGoon() ) break;
	    		 				} 			
	    		 				if( aar.getResult().equals("failure")){
	    		 					if( ! aar.getGoon() ) break;
	    		 				}else if( ! aar.getGoon() ) break;
	    		 			}
	    		 }
	    		}//onEvent
	    		if( currentEvent.getEventId().equals("ostacolo") ){
	    		 		String parg = "";
	    		 		/* SwitchPlan */
	    		 		parg =  updateVars(  Term.createTerm("ostacolo"), Term.createTerm("ostacolo"), 
	    		 			    		  					Term.createTerm(currentEvent.getMsg()), parg);
	    		 			if( parg != null ){
	    		 				 if( ! planUtils.switchToPlan("valutaOstacolo").getGoon() ) break; 
	    		 			}//else println("guard  fails");  //parg is null when there is no guard (onEvent)
	    		 }
	    		//onEvent
	    		if( currentEvent.getEventId().equals("robotDetected") ){
	    		 		String parg="assign(distanzaB,D)";
	    		 		/* PHead */
	    		 		parg =  updateVars( Term.createTerm("robotDetected(Sonar,Distanza)"), Term.createTerm("robotDetected(sonarb,D)"), 
	    		 			    		  					Term.createTerm(currentEvent.getMsg()), parg);
	    		 			if( parg != null ) {
	    		 			    aar = QActorUtils.solveGoal(this,myCtx,pengine,parg,"",outEnvView,86400000);
	    		 				//println(getName() + " plan " + curPlanInExec  +  " interrupted=" + aar.getInterrupted() + " action goon="+aar.getGoon());
	    		 				if( aar.getInterrupted() ){
	    		 					curPlanInExec   = "aspettaEventi";
	    		 					if( aar.getTimeRemained() <= 0 ) addRule("tout(demo,"+getName()+")");
	    		 					if( ! aar.getGoon() ) break;
	    		 				} 			
	    		 				if( aar.getResult().equals("failure")){
	    		 					if( ! aar.getGoon() ) break;
	    		 				}else if( ! aar.getGoon() ) break;
	    		 			}
	    		 }
	    		//onEvent
	    		if( currentEvent.getEventId().equals("robotDetected") ){
	    		 		String parg="stop";
	    		 		/* RaiseEvent */
	    		 		parg = updateVars(Term.createTerm("robotDetected(Sonar,Distanza)"),  Term.createTerm("robotDetected(sonarb,D)"), 
	    		 			    		  					Term.createTerm(currentEvent.getMsg()), parg);
	    		 		if( parg != null ) emit( "stop", parg );
	    		 }
	    		//onEvent
	    		if( currentEvent.getEventId().equals("robotDetected") ){
	    		 		String parg = "";
	    		 		/* SwitchPlan */
	    		 		parg =  updateVars(  Term.createTerm("robotDetected(Sonar,Distanza)"), Term.createTerm("robotDetected(sonarb,D)"), 
	    		 			    		  					Term.createTerm(currentEvent.getMsg()), parg);
	    		 			if( parg != null ){
	    		 				 if( ! planUtils.switchToPlan("risolviGap").getGoon() ) break; 
	    		 			}//else println("guard  fails");  //parg is null when there is no guard (onEvent)
	    		 }
	    		if( planUtils.repeatPlan(nPlanIter,0).getGoon() ) continue;
	    break;
	    }//while
	    return returnValue;
	    }catch(Exception e){
	       //println( getName() + " plan=aspettaEventi WARNING:" + e.getMessage() );
	       QActorContext.terminateQActorSystem(this); 
	       return false;  
	    }
	    }
	    public boolean risolviGap() throws Exception{	//public to allow reflection
	    try{
	    	int nPlanIter = 0;
	    	//curPlanInExec =  "risolviGap";
	    	boolean returnValue = suspendWork;		//MARCHH2017
	    while(true){
	    	curPlanInExec =  "risolviGap";	//within while since it can be lost by switchlan
	    	nPlanIter++;
	    		temporaryStr = "\"piano risolviGap\"";
	    		println( temporaryStr );  
	    		parg = "gap(Dir,Dist)";
	    		//tout=1 day (24 h)
	    		//aar = solveGoalReactive(parg,86400000,"","");
	    		//genCheckAar(m.name)Â»		
	    		QActorUtils.solveGoal(parg,pengine );
	    		if( (guardVars = QActorUtils.evalTheGuard(this, " !?goalResult(G)" )) != null ){
	    		temporaryStr = "G";
	    		temporaryStr = QActorUtils.substituteVars(guardVars,temporaryStr);
	    		println( temporaryStr );  
	    		}
	    		if( (guardVars = QActorUtils.evalTheGuard(this, " ??goalResult(gap(destra,D))" )) != null ){
	    		temporaryStr = QActorUtils.unifyMsgContent(pengine,"comando(X)","comando(destra)", guardVars ).toString();
	    		sendMsg("comando","rover", QActorContext.dispatch, temporaryStr ); 
	    		}
	    		if( (guardVars = QActorUtils.evalTheGuard(this, " ??goalResult(gap(sinistra,D))" )) != null ){
	    		temporaryStr = QActorUtils.unifyMsgContent(pengine,"comando(X)","comando(sinistra)", guardVars ).toString();
	    		sendMsg("comando","rover", QActorContext.dispatch, temporaryStr ); 
	    		}
	    		if( (guardVars = QActorUtils.evalTheGuard(this, " ??goalResult(gap(no,D))" )) != null ){
	    		println( "" );
	    		//IF(curPlan.resume)Â»returnValue = continueWork;ENDIFÂ»
	    		returnValue = continueWork;
	    		break;
	    		}
	    		else{ if( ! planUtils.switchToPlan("controlloPosizione").getGoon() ) break;
	    		}returnValue = continueWork;  
	    break;
	    }//while
	    return returnValue;
	    }catch(Exception e){
	       //println( getName() + " plan=risolviGap WARNING:" + e.getMessage() );
	       QActorContext.terminateQActorSystem(this); 
	       return false;  
	    }
	    }
	    public boolean controlloPosizione() throws Exception{	//public to allow reflection
	    try{
	    	int nPlanIter = 0;
	    	//curPlanInExec =  "controlloPosizione";
	    	boolean returnValue = suspendWork;		//MARCHH2017
	    while(true){
	    	curPlanInExec =  "controlloPosizione";	//within while since it can be lost by switchlan
	    	nPlanIter++;
	    		temporaryStr = "\"piano controlloPosizione\"";
	    		println( temporaryStr );  
	    		//senseEvent
	    		aar = planUtils.senseEvents( 600000,"robotDetected,ostacolo","continue,continue",
	    		"" , "",ActionExecMode.synch );
	    		if( ! aar.getGoon() || aar.getTimeRemained() <= 0 ){
	    			//println("			WARNING: sense timeout");
	    			addRule("tout(senseevent,"+getName()+")");
	    		}
	    		printCurrentEvent(false);
	    		//onEvent
	    		if( currentEvent.getEventId().equals("ostacolo") ){
	    		 		String parg = "";
	    		 		/* SwitchPlan */
	    		 		parg =  updateVars(  Term.createTerm("ostacolo"), Term.createTerm("ostacolo"), 
	    		 			    		  					Term.createTerm(currentEvent.getMsg()), parg);
	    		 			if( parg != null ){
	    		 				 if( ! planUtils.switchToPlan("valutaOstacolo").getGoon() ) break; 
	    		 			}//else println("guard  fails");  //parg is null when there is no guard (onEvent)
	    		 }
	    		//onEvent
	    		if( currentEvent.getEventId().equals("robotDetected") ){
	    		 		String parg="assign(distanzaB,D)";
	    		 		/* PHead */
	    		 		parg =  updateVars( Term.createTerm("robotDetected(Sonar,Distanza)"), Term.createTerm("robotDetected(sonarb,D)"), 
	    		 			    		  					Term.createTerm(currentEvent.getMsg()), parg);
	    		 			if( parg != null ) {
	    		 			    aar = QActorUtils.solveGoal(this,myCtx,pengine,parg,"",outEnvView,86400000);
	    		 				//println(getName() + " plan " + curPlanInExec  +  " interrupted=" + aar.getInterrupted() + " action goon="+aar.getGoon());
	    		 				if( aar.getInterrupted() ){
	    		 					curPlanInExec   = "controlloPosizione";
	    		 					if( aar.getTimeRemained() <= 0 ) addRule("tout(demo,"+getName()+")");
	    		 					if( ! aar.getGoon() ) break;
	    		 				} 			
	    		 				if( aar.getResult().equals("failure")){
	    		 					if( ! aar.getGoon() ) break;
	    		 				}else if( ! aar.getGoon() ) break;
	    		 			}
	    		 }
	    		//onEvent
	    		if( currentEvent.getEventId().equals("robotDetected") ){
	    		 		String parg="gap(Dir,Dist)";
	    		 		/* PHead */
	    		 		parg =  updateVars( Term.createTerm("robotDetected(Sonar,Distanza)"), Term.createTerm("robotDetected(sonarb,D)"), 
	    		 			    		  					Term.createTerm(currentEvent.getMsg()), parg);
	    		 			if( parg != null ) {
	    		 			    aar = QActorUtils.solveGoal(this,myCtx,pengine,parg,"",outEnvView,86400000);
	    		 				//println(getName() + " plan " + curPlanInExec  +  " interrupted=" + aar.getInterrupted() + " action goon="+aar.getGoon());
	    		 				if( aar.getInterrupted() ){
	    		 					curPlanInExec   = "controlloPosizione";
	    		 					if( aar.getTimeRemained() <= 0 ) addRule("tout(demo,"+getName()+")");
	    		 					if( ! aar.getGoon() ) break;
	    		 				} 			
	    		 				if( aar.getResult().equals("failure")){
	    		 					if( ! aar.getGoon() ) break;
	    		 				}else if( ! aar.getGoon() ) break;
	    		 			}
	    		 }
	    		if( (guardVars = QActorUtils.evalTheGuard(this, " !?goalResult(gap(Dir,D))" )) != null ){
	    		temporaryStr = "D";
	    		temporaryStr = QActorUtils.substituteVars(guardVars,temporaryStr);
	    		println( temporaryStr );  
	    		}
	    		if( (guardVars = QActorUtils.evalTheGuard(this, " ??goalResult(gap(Dir,0))" )) != null ){
	    		//onEvent
	    		if( currentEvent.getEventId().equals("robotDetected") ){
	    		 		String parg="stop";
	    		 		parg = updateVars(Term.createTerm("robotDetected(Sonar,Distanza)"),  Term.createTerm("robotDetected(sonarb,D)"), 
	    		 			    		  					Term.createTerm(currentEvent.getMsg()), parg);
	    		 		if( parg != null ) emit( "stop", parg );
	    		 }
	    		}
	    		else{ if( planUtils.repeatPlan(nPlanIter,0).getGoon() ) continue;
	    		}returnValue = continueWork;  
	    break;
	    }//while
	    return returnValue;
	    }catch(Exception e){
	       //println( getName() + " plan=controlloPosizione WARNING:" + e.getMessage() );
	       QActorContext.terminateQActorSystem(this); 
	       return false;  
	    }
	    }
	    public boolean valutaOstacolo() throws Exception{	//public to allow reflection
	    try{
	    	int nPlanIter = 0;
	    	//curPlanInExec =  "valutaOstacolo";
	    	boolean returnValue = suspendWork;		//MARCHH2017
	    while(true){
	    	curPlanInExec =  "valutaOstacolo";	//within while since it can be lost by switchlan
	    	nPlanIter++;
	    		//delay
	    		aar = delayReactive(2000,"" , "");
	    		if( aar.getInterrupted() ) curPlanInExec   = "valutaOstacolo";
	    		if( ! aar.getGoon() ) break;
	    		//senseEvent
	    		aar = planUtils.senseEvents( 500,"ostacolo","continue",
	    		"" , "",ActionExecMode.synch );
	    		if( ! aar.getGoon() || aar.getTimeRemained() <= 0 ){
	    			//println("			WARNING: sense timeout");
	    			addRule("tout(senseevent,"+getName()+")");
	    		}
	    		if( (guardVars = QActorUtils.evalTheGuard(this, " !?tout(senseevent,QA)" )) != null ){
	    		temporaryStr = QActorUtils.unifyMsgContent(pengine,"comando(X)","comando(avanti)", guardVars ).toString();
	    		sendMsg("comando","rover", QActorContext.dispatch, temporaryStr ); 
	    		}
	    		if( (guardVars = QActorUtils.evalTheGuard(this, " ??tout(senseevent,QA)" )) != null ){
	    		println( "" );
	    		//IF(curPlan.resume)Â»returnValue = continueWork;ENDIFÂ»
	    		returnValue = continueWork;
	    		break;
	    		}
	    		//onEvent
	    		if( currentEvent.getEventId().equals("ostacolo") ){
	    		 		String parg = "\"Ostacolo fisso\"";
	    		 		/* Print */
	    		 		parg =  updateVars( Term.createTerm("ostacolo"), Term.createTerm("ostacolo"), 
	    		 			    		  					Term.createTerm(currentEvent.getMsg()), parg);
	    		 			if( parg != null ) println( parg );  
	    		 }
	    		//onEvent
	    		if( currentEvent.getEventId().equals("ostacolo") ){
	    		 		String parg = "";
	    		 		/* SwitchPlan */
	    		 		parg =  updateVars(  Term.createTerm("ostacolo"), Term.createTerm("ostacolo"), 
	    		 			    		  					Term.createTerm(currentEvent.getMsg()), parg);
	    		 			if( parg != null ){
	    		 				 if( ! planUtils.switchToPlan("ricercaVarco").getGoon() ) break; 
	    		 			}//else println("guard  fails");  //parg is null when there is no guard (onEvent)
	    		 }
	    		returnValue = continueWork;  
	    break;
	    }//while
	    return returnValue;
	    }catch(Exception e){
	       //println( getName() + " plan=valutaOstacolo WARNING:" + e.getMessage() );
	       QActorContext.terminateQActorSystem(this); 
	       return false;  
	    }
	    }
	    public boolean ricercaVarco() throws Exception{	//public to allow reflection
	    try{
	    	int nPlanIter = 0;
	    	//curPlanInExec =  "ricercaVarco";
	    	boolean returnValue = suspendWork;		//MARCHH2017
	    while(true){
	    	curPlanInExec =  "ricercaVarco";	//within while since it can be lost by switchlan
	    	nPlanIter++;
	    		parg = "caricaPossibiliDirezioni";
	    		//tout=1 day (24 h)
	    		//aar = solveGoalReactive(parg,86400000,"","");
	    		//genCheckAar(m.name)Â»		
	    		QActorUtils.solveGoal(parg,pengine );
	    		if( ! planUtils.switchToPlan("scegliDirezioneRicerca").getGoon() ) break;
	    break;
	    }//while
	    return returnValue;
	    }catch(Exception e){
	       //println( getName() + " plan=ricercaVarco WARNING:" + e.getMessage() );
	       QActorContext.terminateQActorSystem(this); 
	       return false;  
	    }
	    }
	    public boolean scegliDirezioneRicerca() throws Exception{	//public to allow reflection
	    try{
	    	int nPlanIter = 0;
	    	//curPlanInExec =  "scegliDirezioneRicerca";
	    	boolean returnValue = suspendWork;		//MARCHH2017
	    while(true){
	    	curPlanInExec =  "scegliDirezioneRicerca";	//within while since it can be lost by switchlan
	    	nPlanIter++;
	    		parg = "possibileDirezione(D)";
	    		//tout=1 day (24 h)
	    		//aar = solveGoalReactive(parg,86400000,"","");
	    		//genCheckAar(m.name)Â»		
	    		QActorUtils.solveGoal(parg,pengine );
	    		if( (guardVars = QActorUtils.evalTheGuard(this, " ??goalResult(possibileDirezione(destra))" )) != null ){
	    		if( ! planUtils.switchToPlan("ricercaVarcoDestra").getGoon() ) break;
	    		}
	    		if( (guardVars = QActorUtils.evalTheGuard(this, " ??goalResult(possibileDirezione(sinistra))" )) != null ){
	    		if( ! planUtils.switchToPlan("ricercaVarcoSinistra").getGoon() ) break;
	    		}
	    break;
	    }//while
	    return returnValue;
	    }catch(Exception e){
	       //println( getName() + " plan=scegliDirezioneRicerca WARNING:" + e.getMessage() );
	       QActorContext.terminateQActorSystem(this); 
	       return false;  
	    }
	    }
	    public boolean ricercaVarcoDestra() throws Exception{	//public to allow reflection
	    try{
	    	int nPlanIter = 0;
	    	//curPlanInExec =  "ricercaVarcoDestra";
	    	boolean returnValue = suspendWork;		//MARCHH2017
	    while(true){
	    	curPlanInExec =  "ricercaVarcoDestra";	//within while since it can be lost by switchlan
	    	nPlanIter++;
	    		temporaryStr = "\"piano ricercaVarcoDestra\"";
	    		println( temporaryStr );  
	    		if( (guardVars = QActorUtils.evalTheGuard(this, " !?value(destra,N)" )) != null ){
	    		parg = "inc(destra,1,N1)";
	    		parg = QActorUtils.substituteVars(guardVars,parg);
	    		//tout=1 day (24 h)
	    		//aar = solveGoalReactive(parg,86400000,"","");
	    		//genCheckAar(m.name)Â»		
	    		QActorUtils.solveGoal(parg,pengine );
	    		}
	    		else{ parg = "assign(destra,0)";
	    		parg = QActorUtils.substituteVars(guardVars,parg);
	    		//tout=1 day (24 h)
	    		//aar = solveGoalReactive(parg,86400000,"","");
	    		//genCheckAar(m.name)Â»		
	    		QActorUtils.solveGoal(parg,pengine );
	    		}temporaryStr = QActorUtils.unifyMsgContent(pengine,"comando(X)","comando(varcoDestra)", guardVars ).toString();
	    		sendMsg("comando","rover", QActorContext.dispatch, temporaryStr ); 
	    		//OnReceiveMsg 
	    			 aar  = planUtils.receiveMsg(mysupport,
	    			 "terminataProcedura" , "dispatch" , 
	    			 "rover" , "robotmind" ,
	    			 "terminataProcedura(X)" , "N", 600000, "" , "");	//could block
	    			 //println(getName() + " plan " + curPlanInExec  +  " interrupted=" + aar.getInterrupted() + " action goon="+aar.getGoon());
	    			 if( aar.getInterrupted() ){
	    			 	curPlanInExec   = "ricercaVarcoDestra";
	    			 	if( aar.getTimeRemained() <= 0 ) addRule("tout(OnReceiveMsg,"+getName()+")");
	    			 	if( ! aar.getGoon() ) break;
	    			 } 			
	    			if( ! aar.getGoon() || aar.getTimeRemained() <= 0 ){
	    				//println(" " + getName() + " no goon " + aar.getTimeRemained() + "/" +  600000);
	    				addRule("tout(receivemsg,"+getName()+")");
	    			}
	    		//onMsg
	    		if( currentMessage.msgId().equals("terminataProcedura") ){
	    			String parg = "X";
	    			/* Print */
	    			parg =  updateVars( Term.createTerm("terminataProcedura(X)"), Term.createTerm("terminataProcedura(X)"), 
	    				    		  					Term.createTerm(currentMessage.msgContent()), parg);
	    				if( parg != null ) println( parg );  
	    		}//onMsg
	    		if( currentMessage.msgId().equals("terminataProcedura") ){
	    			String parg="X";
	    			/* AddRule */
	    			parg = updateVars(Term.createTerm("terminataProcedura(X)"),  Term.createTerm("terminataProcedura(X)"), 
	    				    		  					Term.createTerm(currentMessage.msgContent()), parg);
	    			if( parg != null ) addRule(parg);	    		  					
	    		}if( (guardVars = QActorUtils.evalTheGuard(this, " !?libero" )) != null ){
	    		temporaryStr = QActorUtils.unifyMsgContent(pengine,"comando(X)","comando(avanti)", guardVars ).toString();
	    		sendMsg("comando","rover", QActorContext.dispatch, temporaryStr ); 
	    		}
	    		if( (guardVars = QActorUtils.evalTheGuard(this, " ??libero" )) != null ){
	    		if( ! planUtils.switchToPlan("fineRicerca").getGoon() ) break;
	    		}
	    		if( (guardVars = QActorUtils.evalTheGuard(this, " ??muroDiFianco" )) != null ){
	    		if( ! planUtils.switchToPlan("riposizionaDaDestra").getGoon() ) break;
	    		}
	    		if( (guardVars = QActorUtils.evalTheGuard(this, " ??muroDavanti" )) != null ){
	    		if( planUtils.repeatPlan(nPlanIter,0).getGoon() ) continue;
	    		}
	    		returnValue = continueWork;  
	    break;
	    }//while
	    return returnValue;
	    }catch(Exception e){
	       //println( getName() + " plan=ricercaVarcoDestra WARNING:" + e.getMessage() );
	       QActorContext.terminateQActorSystem(this); 
	       return false;  
	    }
	    }
	    public boolean ricercaVarcoSinistra() throws Exception{	//public to allow reflection
	    try{
	    	int nPlanIter = 0;
	    	//curPlanInExec =  "ricercaVarcoSinistra";
	    	boolean returnValue = suspendWork;		//MARCHH2017
	    while(true){
	    	curPlanInExec =  "ricercaVarcoSinistra";	//within while since it can be lost by switchlan
	    	nPlanIter++;
	    		temporaryStr = "\"piano ricercaVarcoSinistra\"";
	    		println( temporaryStr );  
	    		if( (guardVars = QActorUtils.evalTheGuard(this, " !?value(sinistra,N)" )) != null ){
	    		parg = "inc(sinistra,1,N1)";
	    		parg = QActorUtils.substituteVars(guardVars,parg);
	    		//tout=1 day (24 h)
	    		//aar = solveGoalReactive(parg,86400000,"","");
	    		//genCheckAar(m.name)Â»		
	    		QActorUtils.solveGoal(parg,pengine );
	    		}
	    		else{ parg = "assign(sinistra,0)";
	    		parg = QActorUtils.substituteVars(guardVars,parg);
	    		//tout=1 day (24 h)
	    		//aar = solveGoalReactive(parg,86400000,"","");
	    		//genCheckAar(m.name)Â»		
	    		QActorUtils.solveGoal(parg,pengine );
	    		}temporaryStr = QActorUtils.unifyMsgContent(pengine,"comando(X)","comando(varcoSinistra)", guardVars ).toString();
	    		sendMsg("comando","rover", QActorContext.dispatch, temporaryStr ); 
	    		//OnReceiveMsg 
	    			 aar  = planUtils.receiveMsg(mysupport,
	    			 "terminataProcedura" , "dispatch" , 
	    			 "rover" , "robotmind" ,
	    			 "terminataProcedura(X)" , "N", 600000, "" , "");	//could block
	    			 //println(getName() + " plan " + curPlanInExec  +  " interrupted=" + aar.getInterrupted() + " action goon="+aar.getGoon());
	    			 if( aar.getInterrupted() ){
	    			 	curPlanInExec   = "ricercaVarcoSinistra";
	    			 	if( aar.getTimeRemained() <= 0 ) addRule("tout(OnReceiveMsg,"+getName()+")");
	    			 	if( ! aar.getGoon() ) break;
	    			 } 			
	    			if( ! aar.getGoon() || aar.getTimeRemained() <= 0 ){
	    				//println(" " + getName() + " no goon " + aar.getTimeRemained() + "/" +  600000);
	    				addRule("tout(receivemsg,"+getName()+")");
	    			}
	    		//onMsg
	    		if( currentMessage.msgId().equals("terminataProcedura") ){
	    			String parg = "X";
	    			/* Print */
	    			parg =  updateVars( Term.createTerm("terminataProcedura(X)"), Term.createTerm("terminataProcedura(X)"), 
	    				    		  					Term.createTerm(currentMessage.msgContent()), parg);
	    				if( parg != null ) println( parg );  
	    		}//onMsg
	    		if( currentMessage.msgId().equals("terminataProcedura") ){
	    			String parg="X";
	    			/* AddRule */
	    			parg = updateVars(Term.createTerm("terminataProcedura(X)"),  Term.createTerm("terminataProcedura(X)"), 
	    				    		  					Term.createTerm(currentMessage.msgContent()), parg);
	    			if( parg != null ) addRule(parg);	    		  					
	    		}if( (guardVars = QActorUtils.evalTheGuard(this, " !?libero" )) != null ){
	    		temporaryStr = QActorUtils.unifyMsgContent(pengine,"comando(X)","comando(avanti)", guardVars ).toString();
	    		sendMsg("comando","rover", QActorContext.dispatch, temporaryStr ); 
	    		}
	    		if( (guardVars = QActorUtils.evalTheGuard(this, " ??libero" )) != null ){
	    		if( ! planUtils.switchToPlan("fineRicerca").getGoon() ) break;
	    		}
	    		if( (guardVars = QActorUtils.evalTheGuard(this, " ??muroDiFianco" )) != null ){
	    		if( ! planUtils.switchToPlan("riposizionaDaSinistra").getGoon() ) break;
	    		}
	    		if( (guardVars = QActorUtils.evalTheGuard(this, " ??muroDavanti" )) != null ){
	    		if( planUtils.repeatPlan(nPlanIter,0).getGoon() ) continue;
	    		}
	    		returnValue = continueWork;  
	    break;
	    }//while
	    return returnValue;
	    }catch(Exception e){
	       //println( getName() + " plan=ricercaVarcoSinistra WARNING:" + e.getMessage() );
	       QActorContext.terminateQActorSystem(this); 
	       return false;  
	    }
	    }
	    public boolean fineRicerca() throws Exception{	//public to allow reflection
	    try{
	    	int nPlanIter = 0;
	    	//curPlanInExec =  "fineRicerca";
	    	boolean returnValue = suspendWork;		//MARCHH2017
	    while(true){
	    	curPlanInExec =  "fineRicerca";	//within while since it can be lost by switchlan
	    	nPlanIter++;
	    		temporaryStr = "possibileDirezione(destra)";
	    		removeRule( temporaryStr );  
	    		temporaryStr = "possibileDirezione(sinistra)";
	    		removeRule( temporaryStr );  
	    		temporaryStr = "value(destra,N)";
	    		removeRule( temporaryStr );  
	    		temporaryStr = "value(sinistra,N)";
	    		removeRule( temporaryStr );  
	    		if( ! planUtils.switchToPlan("aspettaEventi").getGoon() ) break;
	    break;
	    }//while
	    return returnValue;
	    }catch(Exception e){
	       //println( getName() + " plan=fineRicerca WARNING:" + e.getMessage() );
	       QActorContext.terminateQActorSystem(this); 
	       return false;  
	    }
	    }
	    public boolean riposizionaDaDestra() throws Exception{	//public to allow reflection
	    try{
	    	int nPlanIter = 0;
	    	//curPlanInExec =  "riposizionaDaDestra";
	    	boolean returnValue = suspendWork;		//MARCHH2017
	    while(true){
	    	curPlanInExec =  "riposizionaDaDestra";	//within while since it can be lost by switchlan
	    	nPlanIter++;
	    		if( (guardVars = QActorUtils.evalTheGuard(this, " !?value(destra,N)" )) != null ){
	    		temporaryStr = "riposizionamentoDiPassi(N)";
	    		temporaryStr = QActorUtils.substituteVars(guardVars,temporaryStr);
	    		println( temporaryStr );  
	    		}
	    		temporaryStr = "possibileDirezione(destra)";
	    		removeRule( temporaryStr );  
	    		if( (guardVars = QActorUtils.evalTheGuard(this, " ??value(destra,N)" )) != null ){
	    		temporaryStr = QActorUtils.unifyMsgContent(pengine,"comando(X,Y)","comando(sinistra,N)", guardVars ).toString();
	    		sendMsg("comando2","rover", QActorContext.dispatch, temporaryStr ); 
	    		}
	    		if( ! planUtils.switchToPlan("scegliDirezioneRicerca").getGoon() ) break;
	    break;
	    }//while
	    return returnValue;
	    }catch(Exception e){
	       //println( getName() + " plan=riposizionaDaDestra WARNING:" + e.getMessage() );
	       QActorContext.terminateQActorSystem(this); 
	       return false;  
	    }
	    }
	    public boolean riposizionaDaSinistra() throws Exception{	//public to allow reflection
	    try{
	    	int nPlanIter = 0;
	    	//curPlanInExec =  "riposizionaDaSinistra";
	    	boolean returnValue = suspendWork;		//MARCHH2017
	    while(true){
	    	curPlanInExec =  "riposizionaDaSinistra";	//within while since it can be lost by switchlan
	    	nPlanIter++;
	    		if( (guardVars = QActorUtils.evalTheGuard(this, " !?value(sinistra,N)" )) != null ){
	    		temporaryStr = "riposizionamentoDiPassi(N)";
	    		temporaryStr = QActorUtils.substituteVars(guardVars,temporaryStr);
	    		println( temporaryStr );  
	    		}
	    		temporaryStr = "possibileDirezione(sinistra)";
	    		removeRule( temporaryStr );  
	    		if( (guardVars = QActorUtils.evalTheGuard(this, " ??value(sinistra,N)" )) != null ){
	    		temporaryStr = QActorUtils.unifyMsgContent(pengine,"comando(X,Y)","comando(destra,N)", guardVars ).toString();
	    		sendMsg("comando2","rover", QActorContext.dispatch, temporaryStr ); 
	    		}
	    		if( ! planUtils.switchToPlan("scegliDirezioneRicerca").getGoon() ) break;
	    break;
	    }//while
	    return returnValue;
	    }catch(Exception e){
	       //println( getName() + " plan=riposizionaDaSinistra WARNING:" + e.getMessage() );
	       QActorContext.terminateQActorSystem(this); 
	       return false;  
	    }
	    }
	    public boolean errore() throws Exception{	//public to allow reflection
	    try{
	    	int nPlanIter = 0;
	    	//curPlanInExec =  "errore";
	    	boolean returnValue = suspendWork;		//MARCHH2017
	    while(true){
	    	curPlanInExec =  "errore";	//within while since it can be lost by switchlan
	    	nPlanIter++;
	    		println( "Nessun sentiero possibile" );
	    		//QActorContext.terminateQActorSystem(this); 
	    break;
	    }//while
	    return returnValue;
	    }catch(Exception e){
	       //println( getName() + " plan=errore WARNING:" + e.getMessage() );
	       QActorContext.terminateQActorSystem(this); 
	       return false;  
	    }
	    }
	    public boolean controlloUtente() throws Exception{	//public to allow reflection
	    try{
	    	int nPlanIter = 0;
	    	//curPlanInExec =  "controlloUtente";
	    	boolean returnValue = suspendWork;		//MARCHH2017
	    while(true){
	    	curPlanInExec =  "controlloUtente";	//within while since it can be lost by switchlan
	    	nPlanIter++;
	    		temporaryStr = "\"do il controllo all'utente\"";
	    		println( temporaryStr );  
	    		temporaryStr = QActorUtils.unifyMsgContent(pengine,"comando(X)","comando(riceviComandiUtente)", guardVars ).toString();
	    		sendMsg("comando","rover", QActorContext.dispatch, temporaryStr ); 
	    		if( ! planUtils.switchToPlan("aspettaEventi").getGoon() ) break;
	    break;
	    }//while
	    return returnValue;
	    }catch(Exception e){
	       //println( getName() + " plan=controlloUtente WARNING:" + e.getMessage() );
	       QActorContext.terminateQActorSystem(this); 
	       return false;  
	    }
	    }
	    protected void initSensorSystem(){
	    	//doing nothing in a QActor
	    }
	    
	 
		/* 
		* ------------------------------------------------------------
		* APPLICATION ACTIONS
		* ------------------------------------------------------------
		*/
		/* 
		* ------------------------------------------------------------
		* QUEUE  
		* ------------------------------------------------------------
		*/
		    protected void getMsgFromInputQueue(){
	//	    	println( " %%%% getMsgFromInputQueue" ); 
		    	QActorMessage msg = mysupport.getMsgFromQueue(); //blocking
	//	    	println( " %%%% getMsgFromInputQueue continues with " + msg );
		    	this.currentMessage = msg;
		    }
	  }
	
