System m1

Event stop : stop()
Event robotOnA: robotOnA()
Event robotLeaveA: robotLeaveA()
Event cmd : cmd(X)

/*This web interface is automatically generated in the
srcMore directory in a package associated with each
Context when the -httpserver flag for a Context is set.
It is implemented by a HTTP web-socket server working
on port 8080.
The RUN button at the top of the GUI allow us to ask
the robot to execute actions, while the buttons at the
bottom allows us to move the (basic) robot and send
alarms.
The top-level part of the GUI can be used to inspect
and change the state of the robot as represented in the
robot's WorldTheory
 */

Context  ctxRover  			ip [ host="192.168.251.1"  port=8070 ] -httpserver//NOTE elimino un qa dai giochi
Context  ctxSonarArrivoMoc     ip [ host="192.168.251.3"  port=8035 ]   
Context  ctxSonarPartenzaMoc   ip [ host="192.168.251.4"  port=8035 ]  
//Context  ctxButtonStart  	ip [ host="127.0.0.1"      port=8080 ]

QActor mocsonarb context ctxSonarArrivoMoc  {
	Plan init normal     
		println("ctxSonarArrivo start")	;
		delay time (5000);
		println("invio event stop");
		 emit stop : stop();
		repeatPlan
}

QActor mocsonara context ctxSonarPartenzaMoc
{
	Plan init normal     
		println("SonarPartenza Start")	;
		actorOp initSonar ;
		switchToPlan rilevaRobotOnA  ;
		println("SonarPartenza Start")
		
		
	//appena il robot è presente emetto l'evento per abilitare il bottone e
	//passo alla modalità di rilevamento della partenza	
	Plan rilevaRobotOnA resumeLastPlan
		delay time (5000);
		println("invio event robotOnA");
		 emit robotOnA : robotOnA();
		 switchToPlan rilevaRobotLeaveA
		
	Plan rilevaRobotLeaveA resumeLastPlan
		delay time (5000);
		println("invio event robotLeaveA");
		 emit robotLeaveA : robotLeaveA()
}

/*Robot mock */QActor rover context ctxRover {	 
	/*
	 * R2: Il robot comincia a muoversi alla pressione del tasto start
	 */
	Plan init normal        
		sense time(600000) cmd -> continue;
		onEvent cmd:cmd(start)->switchToPlan traversata;
		repeatPlan

	/*
	 * R1: Il robot si muove in avanti fino a quando non è arrivato a destinazione
	 */		
  	Plan traversata resumeLastPlan
		println("Inizio traversata")//;
	//	robotForward speed(100) time(600000) react event stop -> fermaRobot
 	
 	Plan fermaRobot resumeLastPlan
 		println("Stop requested")//;
 		//robotStop speed(0) time(0)
}

//QActor buttonstart context ctxButtonStart{}