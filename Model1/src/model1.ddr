RobotSystem m1

Event robotDetected : robotDetected(Sonar)
Event robotLeave : robotLeave(Sonar)
Event cmd : cmd(X)
Dispatch comando : comando(D)
Event stop : stop
  
//Context  ctxRover  			ip [host="localhost" port=8070] //NOTE elimino un qa dai giochi
//Context  ctxController      ip [host="localhost" port=8040] -httpserver

Context  ctxRover  			ip [host="192.168.137.2" port=8070] //NOTE elimino un qa dai giochi
Context  ctxController      ip [host="192.168.137.1" port=8040] -httpserver


QActor robotmind context ctxController {
	Plan init normal
		println("controller starts");
		switchToPlan aspettaEventi
	
	// mi è arrivato un evento dai sonar, cerco di capire cosa è stato rilevato, o reagisco di conseguenza
	Plan aspettaEventi //R1.1
		println("in ascolto");
		sense time(600000) cmd, robotLeave, robotDetected -> continue, continue, continue;
		printCurrentEvent;
		
		// controllo se il rover è davanti al sonar a ed ho ricevuto il comando start
		[!? davanti(sonara,rover)] onEvent cmd:cmd(start) -> forward rover -m comando:comando(avanti);
		
		//modifico la mia conoscenza interna sulla posizione del rover rispetto ai sonar
		[!? davanti(sonara,rover)] onEvent robotLeave:robotLeave(sonara) -> removeRule davanti(sonara,rover)
						   else onEvent robotDetected:robotDetected(sonara) -> addRule davanti(sonara,rover);
		onEvent robotDetected:robotDetected(sonara) -> println(robotDetected(sonara));
		onEvent robotDetected:robotDetected(sonarb) -> emit stop:stop;
		repeatPlan	
}

Robot swag QActor rover context ctxRover {	 
	Rules {
		unity("192.168.137.1").
	}
	Plan init normal
		[!?unity(IP)] switchToPlan initUnity else println("Rover pronto");
		switchToPlan aspettaComando
		
	Plan initUnity resumeLastPlan
		[!?unity(IP)] actorOp workWithUnity(IP);
		actorOp initPosition;
		robotRight speed(100) time(2000);
		println("Inizializzazione Unity completata")
		
	// Il robot comincia a muoversi alla pressione del tasto start solo se è davanti al sonarA
	Plan aspettaComando resumeLastPlan //normal //R1
		receiveMsg time(6000);	// m(muovi,dispatch,Mittente,Ricevente,muovi(Dir),N)
		printCurrentMessage;
		onMsg comando:comando(avanti) -> switchToPlan traversata;
		repeatPlan
		
	/*
	 * R1: Il robot si muove in avanti fino a quando non è arrivato a destinazione
	 */		
  	Plan traversata resumeLastPlan//R2
		println("Inizio traversata");
		robotForward speed(60) time(600000) react event stop -> fermaRobot;
		println("Non sono ancora arrivato?");
		repeatPlan
		
 	
 	Plan fermaRobot//R2
 		println("Arresto");
 		robotStop speed(0) time(0);
 		switchToPlan aspettaComando
}
