RobotSystem m1

Event robotDetected : robotDetected(Sonar)
Event robotLeave : robotLeave(Sonar)
Event cmd : cmd(X)

Dispatch muovi : muovi(D)
Event stop : stop
  
Context  ctxRover  			ip [host="localhost" port=8070] //NOTE elimino un qa dai giochi
Context  ctxController      ip [host="localhost" port=8040] -httpserver

QActor robotmind context ctxController {
	Plan init normal
		println("controller starts");
		switchToPlan waitForInput
	
	// mi è arrivato un evento dai sonar, cerco di capire cosa è stato rilevato, o reagisco di conseguenza
	Plan waitForInput 
		sense time(600000) cmd, robotLeave, robotDetected -> handleUserCommand, handleSonarEvent, handleSonarEvent;
		repeatPlan	
		
	Plan handleUserCommand resumeLastPlan
		// controllo se il rover è davanti al sonar a ed ho ricevuto il comando start
		[!? davanti(sonara,rover)] onEvent cmd:cmd(start) -> forward rover -m muovi:muovi(start)
	
	Plan handleSonarEvent resumeLastPlan
		//modifico la mia conoscenza interna sulla posizione del rover rispetto ai sonar
		[!? davanti(sonara,rover)] onEvent robotLeave:robotLeave(sonara) -> removeRule davanti(sonara,rover)
						   else onEvent robotDetected:robotDetected(sonara,D) -> demo salvaDistanzaIniziale(D);
		onEvent robotDetected:robotDetected(sonarb,D) -> emit stop:stop
		
}

Robot mock QActor rover context ctxRover {	 
	Rules {
		unity.
	}
	Plan init normal
		[!?unity] switchToPlan initUnity;
		switchToPlan waitStartCommand
		
	Plan initUnity resumeLastPlan
		actorOp workWithUnity("localhost");
		actorOp initPosition;
		robotRight speed(100) time(2000);
		println("Inizializzazione Unity completata")
	/*
	 * R2: Il robot comincia a muoversi alla pressione del tasto start
	 * R3: solo se è davanti al sonarA
	 */
	Plan waitStartCommand resumeLastPlan //normal   
		receiveMsg time(600000);	// m(muovi,dispatch,Mittente,Ricevente,muovi(Dir),N)
		onMsg muovi : muovi(avanti) -> switchToPlan traversata;
		repeatPlan
		
	/*
	 * R1: Il robot si muove in avanti fino a quando non è arrivato a destinazione
	 */		
  	Plan traversata resumeLastPlan
		println("Inizio traversata");
		robotForward speed(60) time(600000) react event stop -> fermaRobot
 	
 	Plan fermaRobot
 		println("Stop requested");
 		robotStop speed(0) time(0);
 		switchToPlan waitStartCommand
}
