RobotSystem m1

Event robotDetected : robotDetected(Sonar)
Event robotLeave: robotLeave(Sonar)
Event cmd : cmd(X)
Event sonar : sonar(Nome,Oggetto,Distanza)

Context  ctxRover  			ip [ host="192.168.251.1"  port=8070 ] -httpserver//NOTE elimino un qa dai giochi
Context  ctxSonarArrivo     ip [ host="192.168.251.3"  port=8035 ]   
Context  ctxSonarPartenza   ip [ host="192.168.251.4"  port=8035 ]  

QActor sonarb context ctxSonarArrivo  {//MOCK
	Plan init normal     
		println("ctxSonarArrivo start -- wait for start")	;
		sense time(600000) cmd -> continue;
		delay time (6000);
		println("invio event stop");
		emit robotDetected : robotDetected(B)
}

//QActor sonarb context ctxSonarArrivo {	//UNITY
//	Plan rileva normal
//		sense time(600000) sonar -> continue;
//		onEvent sonar : sonar(sonar2,rover,D) -> emit robotDetected : robotDetected(B);
//	 	repeatPlan
//}

QActor sonara context ctxSonarPartenza  {//MOCK
	Plan init normal     
		println("ctxSonarPartenza start -- wait for start")	;
		delay time (1000);
		println("invio event presente in A");
		emit robotDetected : robotDetected(A);
		delay time (2000);     
 		sense time(600000) cmd -> continue;
		onEvent cmd:cmd(start) -> emit robotLeave : robotLeave(A)		
}


//QActor sonara context ctxSonarPartenza //UNITY
//{
//	Plan init normal     
//		println("SonarPartenza Start")	;
//		switchToPlan rilevaRobotOnA;
//		repeatPlan
//		
//	Plan rilevaRobotOnA resumeLastPlan
//		sense time(600000) sonar -> continue;
//		onEvent sonar : sonar(sonar1,rover,D) -> emit robotDetected : robotDetected(A);
//        switchToPlan rilevaRobotLeaveA
//		
//	Plan rilevaRobotLeaveA resumeLastPlan
//		sense time(600000) sonar -> continue;
//		onEvent sonar : sonar(sonar1,rover,D) -> emit robotLeave : robotLeave(A)
//}

Robot mock QActor rover context ctxRover {	 
	
	/*
	 * R2: Il robot comincia a muoversi alla pressione del tasto start
	 * R3: solo se è davanti al sonarA
	 */
	Plan waitStartCommand normal        
		sense time(600000) cmd, robotLeave, robotDetected -> continue, handleLocationInput, handleLocationInput;
		[?? inFrontOf(Rover, A)] onEvent cmd:cmd(start) -> switchToPlan traversata;
		repeatPlan	
		
	/*
	 * R1: Il robot si muove in avanti fino a quando non è arrivato a destinazione
	 */		
  	Plan traversata resumeLastPlan
		println("Inizio traversata");
		robotForward speed(60) time(600000) react event robotDetected -> handleLocationInput
 	
 	Plan fermaRobot resumeLastPlan
 		println("Stop requested");
 		robotStop speed(0) time(0)
 		
	// mi è arrivato un evento dai sonar, cerco di capire dove sono, o reagisco di conseguenza
	Plan handleLocationInput resumeLastPlan
		onEvent robotDetected:robotDetected(A) -> addRule inFrontOf(Rover, A);
		onEvent robotLeave:robotLeave(A) -> removeRule inFrontOf(Rover, A);
		onEvent robotDetected:robotDetected(B) -> switchToPlan fermaRobot //arrivato a destinazione
}
