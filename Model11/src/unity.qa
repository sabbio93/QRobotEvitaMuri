System m11

Event sonar : sonar(Nome,Oggetto,Distanza)
Event sonarDetect : sonarDetect(Oggetto)
Event robotDetected : robotDetected(Sonar,Distanza)
Event robotLeave : robotLeave(Sonar)
Event ostacolo : ostacolo

Context ctxUnity ip [host="localhost" port=8035]
Context ctxController ip [host="localhost" port=8040] -standalone -httpserver

QActor sonarbunity context ctxUnity {	//UNITY
	Plan init normal
		switchToPlan rilevaArrivo;
		println("arrivato");
		switchToPlan rileva;
		println("sparito");
		repeatPlan
	
	Plan rilevaArrivo resumeLastPlan
		sense time(600000) sonar -> continue;
		onEvent sonar : sonar(sonar2,rover,D) -> addRule sonar(sonar2,rover,D);
		[?? sonar(sonar2,rover,D)] emit robotDetected : robotDetected(sonarb,D) else repeatPlan
	Plan rileva resumeLastPlan
		sense time(1000) sonar -> continue;
		[!? tout(senseevent,QA)] emit robotLeave : robotLeave(sonarb)
			else onEvent sonar : sonar(sonar2,rover,D) -> emit robotDetected : robotDetected(sonarb,D);
	 	[?? tout(senseevent,QA)] endPlan "" else repeatPlan
}

QActor sonaraunity context ctxUnity {	//UNITY
	Plan init normal
		delay time(3000);
		println("SonarPartenza Start");
		switchToPlan rilevaRobotOnA;
		switchToPlan rilevaRobotLeaveA;
		repeatPlan
	
	Plan rilevaRobotOnA resumeLastPlan
		sense time(60000) sonar -> continue;
		onEvent sonar : sonar(sonar1,rover,D) -> emit robotDetected : robotDetected(sonara,D)
	Plan rilevaRobotLeaveA resumeLastPlan
		sense time(1000) sonar -> continue;
		[?? tout(senseevent,QA)] emit robotLeave : robotLeave(sonara)
							else repeatPlan
}

QActor sonarrunity context ctxUnity {
	Plan rileva normal
		sense time(60000) sonarDetect -> continue;
		onEvent sonarDetect : sonarDetect(O) -> emit ostacolo : ostacolo;
		repeatPlan
		
}