/* Generated by AN DISI Unibo */ 
package it.unibo.rover;
import it.unibo.is.interfaces.*;
import it.unibo.qactors.*;

//
public class Rover extends AbstractRover { 
	public Rover(String actorId, QActorContext myCtx, IOutputEnvView outEnvView ) throws Exception{
		super(actorId,myCtx,outEnvView ,it.unibo.qactors.QActorUtils.robotBase);
	}
	public void initPosition(){
		createSimulatedActor("rover","Prefabs/CustomActor",-32,0,(int)(Math.random()*65-40),0,1,0,180);
	}
	
	private final MemoriaAzioni memoriaAzioni = new MemoriaAzioni();
	
	/* Cos'Ã¨ una Action in QActor?
	 * -------------------------------------------------------------------------
	 * 					ActionObservableGeneric
	 * Author: AN DISI
	 * Goal:   define a TERMINATING action that emits a (unique) event when it ends
	 * Usage:  
	 * 		activate 		starts the action (Callable) as an asynchronous operation
	 *  	getActionRep:	returns a representation of the action definition
	 *  	getActionAndResultRep: returns a representation of the action and of its result
	 *  	getExecTime:	return the execution time of the action
	 * 
	 * Implementation details:
	 * 		Callable<T>, Future<T>, SituatedSysKb.executorManyThread
	 * -------------------------------------------------------------------------
	 */
	public void salvaOp(String op, int v, int t){
		memoriaAzioni.push(new Azione(op,t,v));
		System.err.println(new Azione(op,t,v));
	}
	public void ripetiOperazioni(){
		final String planName = "ripetiOperazioni";
		try {
			while (!memoriaAzioni.isEmpty()){
				Azione a=memoriaAzioni.pop().inverti();
//				execRobotMove(planName,"forward",15,0,600000,"stop,alarm,ostacolo","fermaRobot,gestisciAllarme,fermaRobot");
				System.err.println(a.toString());
				execRobotMove(planName,a.getNome(),a.getVelocita(),0,a.getDurata(),"stop,alarm,ostacolo","fermaRobot,gestisciAllarme,fermaRobot");
		    }
			execRobotMove(planName,"stop",0,0,0,"","");
			delayReactive(5000,"","");
			System.exit(0);
		} catch (Exception e){
			e.printStackTrace();
		}
	}
}
