RobotSystem m2

Event sonar : sonar(Nome,Oggetto,Distanza)
Event robotDetected : robotDetected(Sonar, Posizione)
Event robotLeave : robotLeave(Sonar)
Event cmd : cmd(X)
Dispatch muovi : muovi(X)
Event stop : stop

//Context  ctxRover  			ip [host="192.168.251.1" port=8070] -httpserver//NOTE elimino un qa dai giochi
//Context  ctxSonarArrivo     ip [host="192.168.251.3" port=8035]   
//Context  ctxSonarPartenza   ip [host="192.168.251.4" port=8036]  
Context  ctxRover  			ip [host="localhost" port=8070] //NOTE elimino un qa dai giochi
Context  ctxController      ip [host="localhost" port=8040] -httpserver
Context  ctxSonarArrivo     ip [ host="localhost"  port=8035 ]   
Context  ctxSonarPartenza   ip [ host="localhost"  port=8035 ]  

//QActor sonarb context ctxSonarArrivo  {//MOCK
//	Plan init normal     
//		println("ctxSonarArrivo start -- wait for start");
//		sense time(600000) cmd -> continue;
//		delay time (6000);
//		println("invio event stop");
//		emit robotDetected : robotDetected(sonarb,d(30));
//		delay time (3000);
//		println("invio event stop");
//		emit robotDetected : robotDetected(sonarb,d(20))
//}

QActor sonarb context ctxSonarArrivo {	//UNITY
	Plan rileva normal
		sense time(600000) sonar -> continue;
		onEvent sonar : sonar(sonar2,rover,D) -> emit robotDetected : robotDetected(sonarb,d(D));
	 	repeatPlan
}

//QActor sonara context ctxSonarPartenza  {//MOCK
//	Plan init normal     
//		println("ctxSonarPartenza start -- wait for start");
//		delay time(1000);
//		println("invio event presente in A");
//		emit robotDetected : robotDetected(sonara,d(20));
//		delay time(2000);     
// 		sense time(600000) cmd -> continue;
//		onEvent cmd:cmd(start) -> emit robotLeave : robotLeave(sonara)		
//}

QActor sonara context ctxSonarPartenza //UNITY
{
	Plan init normal     
		println("SonarPartenza Start");
		switchToPlan rilevaRobotOnA;
		repeatPlan
		
	Plan rilevaRobotOnA resumeLastPlan
		sense time(600000) sonar -> continue;
		onEvent sonar : sonar(sonar1,rover,D) -> emit robotDetected : robotDetected(sonara,d(D));
        switchToPlan rilevaRobotLeaveA
		
	Plan rilevaRobotLeaveA resumeLastPlan
		sense time(600000) sonar -> continue;
		onEvent sonar : sonar(sonar1,rover,D) -> emit robotLeave : robotLeave(sonara)
}

QActor robotmind context ctxController {	 
	Rules{
		/* da WorldTheory del prof:
		 * assign(I,V):-retract(value(I,_)),!,assert(value(I,V)).
		 * assign(I,V):-assert(value(I,V)).
		 * eval(plus,V1,V2,R):-R is V1+V2.
		 * eval(minus,V1,V2,R):-R is V1-V2.
		 * eval(times,V1,V2,R):-R is V1*V2.
		 * eval(div,V1,V2,R):-R is V1/V2.
		 * eval(lt,X,Y):-X<Y.
		 * eval(gt,X,Y):-X>Y.
		 */
		value(incertezza,2).
		sinistra(rover,sonarb).  /* alla sinistra del rover c'è sonarb */
		davanti(rover, sonarb).
		
		salvaDistanzaIniziale(D):-assert(davanti(sonara,rover)),assign(distanzaIniziale,D).


	/* R2: 	Il robot si muove in avanti fino a quando non è arrivato davanti al sonar 
	 * R4: 	il robot se troppo vicino/lontano deve spostarsi verso la posizione ottimale 
	 * 		dal sonar B di arrivo. 
	 */
		prossimaMossa(avanti):-davanti(rover,sonarb),!.		
		prossimaMossa(destra):-davanti(sonarb,rover), value(distanzaB,D),value(incertezza,I),value(distanzaIniziale,Di),eval(minus,Di,I,Dmin), eval(lt,D,Dmin),!.
		prossimaMossa(sinistra):-davanti(sonarb,rover), value(distanzaB,D),value(incertezza,I),value(distanzaIniziale,Di),eval(plus,Di,I,DMAX), eval(gt,D,DMAX),!.
		prossimaMossa(stop):-davanti(sonarb,rover).
		
	}
	
	Plan init normal
		println("controller starts");
		switchToPlan listenToSonar
	
	
	// mi è arrivato un evento dai sonar, cerco di capire cosa è stato rilevato, o reagisco di conseguenza
	Plan listenToSonar
		sense time(600000) cmd, robotLeave, robotDetected -> continue, continue, continue;
		//il rover è davanti al sonar a ed ho ricevuto il comando start
		[!? davanti(sonara,rover)] onEvent cmd:cmd(start) -> switchToPlan pianificaMossa;
		//modifico la mia conoscenza interna sulla posizione del rover rispetto ai sonar
		[!? davanti(sonara,rover)] onEvent robotLeave:robotLeave(sonara) -> removeRule davanti(sonara,rover)
						   else onEvent robotDetected:robotDetected(sonara,d(D)) -> demo salvaDistanzaIniziale(D);
		onEvent robotDetected:robotDetected(sonarb,d(D)) -> switchToPlan pianificaMossa; //arrivato a destinazione	
		repeatPlan	
	
	/*
	 * R1: Il robot si muove in avanti fino a quando non è arrivato a destinazione
	 */		
	Plan pianificaMossa resumeLastPlan
		demo prossimaMossa(Mossa);
		[!? goalResult(R)] println(goalResult(R));
		[?? goalResult(stop)] emit stop : stop;	
		[?? goalResult(G)] forward rover -m muovi : muovi(G)
}

Robot mock QActor rover context ctxRover {
	Rules {
		unity.
		//trasformazioni per rotazione
		
		value(direzione, avanti).
		
		//per ottenere a destra basta invertire i termini :)
		asinistra(davanti, sinistra). asinistra(sinistra, indietro). asinistra(indietro, destra). asinistra(destra, avanti).  
		
		allinea(Dir) :- value(orientazione, Dir), !. //nessuna rotazione		
		//rotazione a sinistra
		allinea(Dir) :- value(orientazione, CurrentDir), asinistra(CurrentDir, Dir), assert(ruota(sinistra)), assign(orientazione, Dir), !. 
		//rotazione a destra
		allinea(Dir) :- value(orientazione, CurrentDir), asinistra(Dir, CurrentDir), assert(ruota(destra)), assign(orientazione, Dir), !. 
		
	}
	Plan init normal
		[!?unity] switchToPlan initUnity;
		switchToPlan attesaComandi
		
	Plan initUnity resumeLastPlan
		actorOp workWithUnity("localhost");
		actorOp initPosition;
		robotRight speed(100) time(2000);
		println("Inizializzazione Unity completata")
	/*
	 * R2: Il robot comincia a muoversi alla pressione del tasto start
	 * R3: solo se è davanti al sonarA
	 */
	Plan attesaComandi //normal        
		receiveMsg time(600000);	// m(muovi,dispatch,Mittente,Ricevente,muovi(Dir),N)
		onMsg muovi : muovi(Dir) -> demo allinea(Dir);
		[?? ruota(destra)] 	robotRight speed(100) time(2000) react event stop -> fermaRobot;
		[?? ruota(sinistra)] 	robotLeft speed(100) time(2000) react event stop -> fermaRobot;
		
		robotForward speed(60) time(600000) react event stop -> fermaRobot;
		repeatPlan
		 	
 	Plan fermaRobot
 		println("Stop requested");
 		robotStop speed(0) time(0);
 		switchToPlan attesaComandi
}
