RobotSystem m2

Event sonar : sonar(Nome,Oggetto,Distanza)
Event robotDetected : robotDetected(Sonar, Posizione)
Event robotLeave : robotLeave(Sonar)
Event cmd : cmd(X)
Event muovi : muovi(X)
Event stop : stop

//Context  ctxRover  			ip [host="192.168.251.1" port=8070] -httpserver//NOTE elimino un qa dai giochi
//Context  ctxSonarArrivo     ip [host="192.168.251.3" port=8035]   
//Context  ctxSonarPartenza   ip [host="192.168.251.4" port=8036]  
Context  ctxRover  			ip [host="localhost" port=8070] //NOTE elimino un qa dai giochi
Context  ctxController      ip [host="localhost" port=8040] -httpserver
Context  ctxSonarArrivo     ip [ host="192.168.251.3"  port=8035 ]   
Context  ctxSonarPartenza   ip [ host="192.168.251.4"  port=8035 ]  

QActor sonarb context ctxSonarArrivo  {//MOCK
	Plan init normal     
		println("ctxSonarArrivo start -- wait for start");
		sense time(600000) cmd -> continue;
		delay time (6000);
		println("invio event stop");
		emit robotDetected : robotDetected(B, d(30));
		delay time (3000);
		println("invio event stop");
		emit robotDetected : robotDetected(B, d(20))
}

//QActor sonarb context ctxSonarArrivo {	//UNITY
//	Plan rileva normal
//		sense time(600000) sonar -> continue;
//		onEvent sonar : sonar(sonar2,rover,D) -> emit robotDetected : robotDetected(B, d(D));
//	 	repeatPlan
//}

QActor sonara context ctxSonarPartenza  {//MOCK
	Plan init normal     
		println("ctxSonarPartenza start -- wait for start");
		delay time(1000);
		println("invio event presente in A");
		emit robotDetected : robotDetected(A,d(20));
		delay time(2000);     
 		sense time(600000) cmd -> continue;
		onEvent cmd:cmd(start) -> emit robotLeave : robotLeave(A)		
}


//QActor sonara context ctxSonarPartenza //UNITY
//{
//	Plan init normal     
//		println("SonarPartenza Start")	;
//		switchToPlan rilevaRobotOnA;
//		repeatPlan
//		
//	Plan rilevaRobotOnA resumeLastPlan
//		sense time(600000) sonar -> continue;
//		onEvent sonar : sonar(sonar1,rover,D) -> emit robotDetected : robotDetected(A, d(D));
//        switchToPlan rilevaRobotLeaveA
//		
//	Plan rilevaRobotLeaveA resumeLastPlan
//		sense time(600000) sonar -> continue;
//		onEvent sonar : sonar(sonar1,rover,D) -> emit robotLeave : robotLeave(A, d(D))
//}

QActor robotmind context ctxController {	 
	Rules{
		saveInitialDistance(D):-assert(inFrontOf(a,rover)),assign(initialDistance,D).
		sinistra(rover,sonarb).  /* alla sinistra del rover c'è sonarb */
	}
	Plan init normal
		println("controller starts");
		switchToPlan listenToSonar
	
	// mi è arrivato un evento dai sonar, cerco di capire cosa è stato rilevato, o reagisco di conseguenza
	Plan listenToSonar
		sense time(600000) cmd, robotLeave, robotDetected -> continue, continue, continue;
		//il rover è davanti al sonar a ed ho ricevuto il comando start
		[!? inFrontOf(a,rover)] onEvent cmd:cmd(start) -> emit muovi:muovi(avanti);
		//modifico la mia conoscenza interna sulla posizione del rover rispetto ai sonar
		[!? inFrontOf(a,rover)] onEvent robotLeave:robotLeave(a) -> removeRule inFrontOf(a,rover)
						   else onEvent robotDetected:robotDetected(a,d(D)) -> demo saveInitialDistance(D);
		onEvent robotDetected:robotDetected(b,d(D)) -> switchToPlan portaInPosizione; //arrivato a destinazione	
		//[!? near(Rover, A)] onEvent cmd:cmd(start) -> switchToPlan traversata;
		repeatPlan	
	
	Plan portaInPosizione resumeLastPlan
		//TODO
		emit stop:stop
//	/*
//	 * R1: Il robot si muove in avanti fino a quando non è arrivato a destinazione
//	 */		
//	// mi è arrivato un evento dai sonar, cerco di capire dove sono, o reagisco di conseguenza
//	Plan handleLocationInput resumeLastPlan
//		[!? near(rover,a)] onEvent robotLeave:robotLeave(a, D) -> removeRule near(rover,a)
//					else onEvent robotDetected:robotDetected(a, D) -> addRule near(rover,a);
//		onEvent robotDetected:robotDetected(B, d(D)) -> switchToPlan handleFinalMovements //arrivato davanti al sonarB
//	/*
//	 * R4: 	il robot se troppo vicino/lontano deve spostarsi verso la posizione ottimale 
//	 * 		dal sonar B di arrivo. 
//	 */
//	Plan handleFinalMovements resumeLastPlan	
//		onEvent robotDetected:robotDetected(B, D)->println("")//TODO fai qualcosa
}

Robot mock QActor rover context ctxRover {
	Rules {
		unity.
	}
	Plan init normal
		[!?unity] switchToPlan initUnity;
		switchToPlan attesaComandi
		
	Plan initUnity resumeLastPlan
		actorOp workWithUnity("localhost");
		actorOp initPosition;
		robotRight speed(100) time(2000);
		println("Inizializzazione Unity completata")
	/*
	 * R2: Il robot comincia a muoversi alla pressione del tasto start
	 * R3: solo se è davanti al sonarA
	 */
	Plan attesaComandi //normal        
		sense time(600000) muovi -> continue;
		onEvent muovi : muovi(avanti) -> robotForward speed(60) time(600000) react event stop -> fermaRobot;
		onEvent muovi : muovi(destra) -> robotRight speed(100) time(2000) react event stop -> fermaRobot;
		onEvent muovi : muovi(sinistra) -> robotRight speed(100) time(2000) react event stop -> fermaRobot;
		repeatPlan
		
	/*
	 * R1: Il robot si muove in avanti fino a quando non è arrivato a destinazione
	 */		
  	/*Plan avanti resumeLastPlan
		//println("Inizio traversata");
		robotForward speed(60) time(600000) react event stop -> fermaRobot*/
 	
 	Plan fermaRobot
 		println("Stop requested");
 		robotStop speed(0) time(0);
 		switchToPlan attesaComandi
}
